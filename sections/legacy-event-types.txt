<section>
<h2 id="legacy-event-types">遗留事件类型</h2>


<em>本节是规范的。以下事件类型已过时淘汰(obsolete)，只能由需要与旧版软件兼容的
<a href="#user-agent">用户代理</a> 实现。</em>

本节的目的是记录这些(遗留)特性的现状及其与规范事件的关系。
对于支持这些(遗留)事件的实现，建议使用本节中提供的定义。

下表提供了本规范中不推荐使用的事件类型的信息概要。
它们被整理在这里是为了(规范的)参考引用和完整性。

++-----------------------------+--------+----------+------------------------------------------+------------------+------------+--------------+------------------------------------------------+ legacy-event-types-list_event-sequence-table
=| 事件类型   			           | 同步 / |  冒泡    | 可信事件目标 							              | DOM 接口	       | 可取消     | 能否从Shadow | 默认行为								                        |
 |							               | 异步	  |  阶段    | 类型					                      		  |					         | 默认行为   |	DOM冒泡传递	 |						 						                        |
 +-----------------------------+----o---+----o-----+--------------------o---------------------+--------o---------+------o-----+------o-------+------------------------------------------------+
+| DOMActivate				         | 同步	  | 冒泡     | <code>Element</code>		           			  | UIEvent			     | 能 		    | 能 		       | 没有                                           |
+| DOMAttrModified			       | 同步	  | 冒泡     | <code>Element</code>		           			  | MutationEvent	   | 不能       | 不能	       | 没有                                           |
+| DOMCharacterDataModified	   | 同步	  | 冒泡     | <code>Text</code>,			           			  | MutationEvent	   | 不能       | 不能	       | 没有                                           |
 |							               |		    |		       | <code>Comment</code>,				        	  |					         |			      |			         |                                                |
 |							               |		    |		       | <code>ProcessingInstruction</code>		    |					         |			      |		           |                                                |
+| DOMFocusIn				           | 同步	  | 冒泡     | <a><code>Window</code></a>,			        | FocusEvent		   | 不能       | 能 		       | 没有                                           |
 |							               |		    |		       | <code>Element</code></td>				        |					         |			      |		           |                                                |
+| DOMFocusOut				         | 同步	  | 冒泡     | <a><code>Window</code></a>,			        | FocusEvent	     | 不能       | 能 		       | 没有                                           |
 |							               |		    |		       | <code>Element</code></td>				        |					         |			      |		           |                                                |
+| DOMNodeInserted			       | 同步	  | 冒泡     | <code>Element</code>, <code>Attr</code>, | MutationEvent	   | 不能       | 不能	       | 没有                                           |
 |							               |		    |		       | <code>Text</code>, <code>Comment</code>, |					         |			      |		           |                                                |
 |							               |		    |		       | <code>DocumentType</code>,				        |					         |			      |		           |                                                |
 |							               |		    |		       | <code>ProcessingInstruction</code>		    |					         |			      |		           |                                                |
+| DOMNodeInsertedIntoDocument | 同步	  | 不冒泡   | <code>Element</code>, <code>Attr</code>, | MutationEvent	   | 不能       | 不能	       | 没有                                           |
 |							               |		    |		       | <code>Text</code>, <code>Comment</code>, |					         |			      |		           |                                                |
 |							               |		    |		       | <code>DocumentType</code>,				        |					         |			      |		           |                                                |
 |							               |		    |		       | <code>ProcessingInstruction</code>	  	  |					         |			      |		           |                                                |
+| DOMNodeRemoved			         | 同步	  | 冒泡     | <code>Element</code>, <code>Attr</code>, | MutationEvent	   | 不能       | 不能	       | 没有                                           |
 |							               |		    |		       | <code>Text</code>, <code>Comment</code>, |					         |			      |		           |                                                |
 |							               |		    |		       | <code>DocumentType</code>,				        |					         |			      |		           |                                                |
 |							               |		    |		       | <code>ProcessingInstruction</code>	   	  |					         |			      |		           |                                                |
+| DOMNodeRemovedFromDocument  | 同步	  | 不冒泡   | <code>Element</code>, <code>Attr</code>, | MutationEvent	   | 不能       | 不能	       | 没有                                           |
 |							               |		    |		       | <code>Text</code>, <code>Comment</code>, |					         |			      |		           |                                                |
 |							               |		    |		       | <code>DocumentType</code>,				        |					         |			      |		           |                                                |
 |							               |		    |		       | <code>ProcessingInstruction</code>		    |					         |			      |		           |                                                |
+| DOMSubtreeModified		       | 同步	  | 冒泡     | <a><code>Window</code></a>,			        | MutationEvent	   | 不能       | 不能	       | 没有                                           |
 |							               |		    |		       | <code>Document</code>,					          |					         |			      |		           |                                                |
 |							               |		    |		       | <code>DocumentFragment</code>,			      |					         |			      |		           |                                                |
 |							               |		    |		       | <code>Element</code>, <code>Attr</code>  |					         |			      |		           |                                                |
+| keypress					           | 同步	  | 冒泡     | <code>Element</code>		           			  | KeyboardEvent	   | 能 		    | 能 		       | 多种: 启动 <a href="#text-composition-system"> |
 |							               |		    |		       |										                      |					         |			      |		           | 文本合成系统</a>; (触发) EVENT{blur} 和 		    |
 |							               |		    |		       |										                      |					         |			      |		           | EVENT{focus} 事件; (触发) EVENT{DOMActivate}   |
 |							               |		    |		       |										                      |					         |			      |		           | 事件; (触发)其它事件		                        |
++-----------------------------+--------+----------+------------------------------------------+------------------+------------+--------------+------------------------------------------------+


<h3 id="legacy-uievent-events">遗留 {{UIEvent}} 事件</h3>

	<h4 id="legacy-uievent-event-types">遗留 {{UIEvent}} 事件类型</h4>

		<h5 id="event-type-DOMActivate"><dfn>DOMActivate</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMActivate</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{UIEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								正在被激活的元素</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
						</ul>
					</td>
				</tr>
			</table>

			当按钮、链接或其他状态可更改的元素被激活时，
			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。查阅 [[#event-flow-activation]] 以获取更多详细信息。

			<p class="warning" id="DOMActivate-deprecated">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMActivate} 
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型，
			而赞成使用相关的 EVENT{click} 事件类型。为了向后兼容，其他规范
			<span class="zh-upper">可以</span> 定义并维护自己的EVENT{DOMActivate} 
			<a href="#event-type">事件类型</a> 。
			</p>

			<p class="note" id="DOMActivate-click">
			虽然 EVENT{DOMActivate} 和 EVENT{click} 并不完全等同，但 
			EVENT{click} 事件类型的实现行为已经发展到包括 EVENT{DOMActivate} 
			<href="#event-type">事件类型</a> 设计时考虑的最关键的无障碍(accessibility)
			方面，并得到了更广泛的实现。鼓励内容作者使用 EVENT{click} 
			<href="#event-type">事件类型</a>，而不是相关的 EVENT{mousedown} 或 
			EVENT{mouseup} <href="#event-type">事件类型</a>，以确保最大程度的可访问性
			(accessibility)。
			</p>

		支持 EVENT{DOMActivate} <href="#event-type">事件类型</a> 的实现还 
		<span class="zh-upper">应当</span> 将 EVENT{DOMActivate} 作为与 
		<a href="#activation-trigger">激活触发器</a> 关联的 EVENT{click} 事件的 
		<a href="#default-action">默认行为</a> 进行派发。然而，对于 
		<a href="#activation-trigger">激活触发器</a> 的任何给定事件，
		这样的实现应该只启动一次相关的 <a href="#"></a>  激活行为。
		Implementations which support the EVENT{DOMActivate} <a>event type</a>
		SHOULD also dispatch a EVENT{DOMActivate} event as a <a>default
		action</a> of a EVENT{click} event which is associated with an
		<a>activation trigger</a>. However, such implementations SHOULD only
		initiate the associated <a>activation behavior</a> once for any given
		occurrence of an <a>activation trigger</a>.

		<div class="example">
		<p>
		The EVENT{DOMActivate} <a>event type</a> is REQUIRED to be supported for
		XForms [[XFORMS11]], which is intended for implementation within a <a>host
		language</a>. In a scenario where a plugin or script-based
		implementation of XForms is intended for installation in a native
		implementation of this specification which does not support the
		EVENT{DOMActivate} <a>event type</a>, the XForms <a>user agent</a> has
		to synthesize and dispatch its own EVENT{DOMActivate} events based on
		the appropriate <a>activation triggers</a>.
		</p>

		<p>
		Thus, when a EVENT{click} event is dispatched by a <a>user agent</a>
		conforming to UI Events, the XForms <a>user agent</a> has to determine
		whether to synthesize a EVENT{DOMActivate} event with the same relevant
		properties as a <a>default action</a> of that EVENT{click} event.
		Appropriate cues might be whether the EVENT{click} event is <a
		href="#trusted-events">trusted</a>, or whether its <a>event target</a>
		has a EVENT{DOMActivate} <a>event listener</a> registered.
		</p>
		</div>

		<p class="note">
		Don't rely upon the interoperable support of EVENT{DOMActivate} in many
		<a>user agents</a>. Instead, the EVENT{click} <a>event type</a> should
		be used since it will provide more accessible behavior due to broader
		implementation support.
		</p>

		<p class="warning">
		The EVENT{DOMActivate} <a>event type</a> is deprecated in this
		specification.
		</p>

	<h4 id="legacy-uievent-event-order">Activation event order</h4>

		If the <code>DOMActivate</code> event is supported by the <a>user
		agent</a>, then the events MUST be dispatched in a set order relative to
		each other: (with only pertinent events listed):

        ++---+-------------+---------------------------------------------------+
        =| # | 事件类型    | Notes                                             |
         +---+-------------+---------------------------------------------------+
        +| 1 | click       |                                                   |
        +| 2 | DOMActivate | <a>default action</a>, if supported by the        |
         |   |             | <a>user agent</a>; synthesized;                   |
         |   |             | <code>isTrusted="true"</code>                     |
        +| 3 |             | <em>All other <a>default actions</a>,             |
				 |   |             | including the <a>activation behavior</a></em>     |
        ++---+-------------+---------------------------------------------------+

		If the focused element is activated by a key event, then the following
		shows the typical sequence of events (with only pertinent events listed):

        ++---+-------------+---------------------------------------------------+
        =| # | 事件类型    | Notes                                             |
         +---+-------------+---------------------------------------------------+
        +| 1 | keydown     | MUST be a key which can activate the element,     |
         |   |             | such as the KEYCAP{Enter} or KEYCAP{&nbsp;&nbsp;} |
         |   |             | (spacebar) key, or the element is not activated   |
        +| 2 | click       | <a>default action</a>; synthesized;               |
         |   |             | <code>isTrusted="true"</code>                     |
        +| 3 | DOMActivate | <a>default action</a>, if supported by the        |
         |   |             | <a>user agent</a>; synthesized;                   |
         |   |             | <code>isTrusted="true"</code>                     |
        +| 4 |             | <em>All other <a>default actions</a>,             |
		 |   |             | including the <a>activation behavior</a></em>     |
        ++---+-------------+---------------------------------------------------+

<h3 id="legacy-focusevent-events">Legacy {{FocusEvent}} events</h3>

	<h4 id="legacy-focusevent-event-types">Legacy {{FocusEvent}} event types</h4>

		<h5 id="event-type-DOMFocusIn"><dfn>DOMFocusIn</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMFocusIn</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{FocusEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><a><code>Window</code></a>, <code>Element</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								<a>event target</a> receiving focus</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} :
								<code>null</code></li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。when an <a>event
			target</a> receives focus. The focus MUST be given to the
			element before the dispatch of this event type. This event type
			MUST be dispatched after the event type EVENT{focus}.

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMFocusIn}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型，
			而赞成使用相关的 EVENT{focus} 和 EVENT{focusin} 事件类型。
			</p>

		<h5 id="event-type-DOMFocusOut"><dfn>DOMFocusOut</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMFocusOut</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{FocusEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><a><code>Window</code></a>, <code>Element</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								<a>event target</a> losing focus</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} :
								<code>null</code></li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。when an <a>event
			target</a> loses focus. The focus MUST be taken from the element
			before the dispatch of this event type. This event type MUST be
			dispatched after the event type EVENT{blur}.

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMFocusOut}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型，
			而赞成使用相关的 EVENT{blur} 和 EVENT{focusout} 事件类型。
			</p>

	<h4 id="legacy-focusevent-event-order">Legacy FocusEvent event order</h4>

		The following is the typical sequence of events when a focus is shifted
		between elements, including the deprecated EVENT{DOMFocusIn} and
		EVENT{DOMFocusOut} events. The order shown assumes that no element is
		initially focused.

        ++---+-------------+---------------------------------------------------+
        =| # | 事件类型    | Notes                                             |
         +---+-------------+---------------------------------------------------+
        +|   |             | <em>User shifts focus</em>                        |
        +| 1 | focusin     | Sent before first target element receives focus   |
        +| 2 | focus       | Sent after first target element receives focus    |
        +| 3 | DOMFocusIn  | If supported                                      |
        +|   |             | <em>User shifts focus</em>                        |
        +| 4 | focusout    | Sent before first target element loses focus      |
        +| 5 | focusin     | Sent before second target element receives focus  |
        +| 6 | blur        | Sent after first target element loses focus       |
        +| 7 | DOMFocusOut | If supported                                      |
        +| 8 | focus       | Sent after second target element receives focus   |
        +| 9 | DOMFocusIn  | If supported                                      |
        ++---+-------------+---------------------------------------------------+

<h3 id="legacy-keyboardevent-events">遗留 {{KeyboardEvent}} 事件</h3>

	EVENT{keypress} 事件是一种，用于捕获按键事件并在按键按下导致的 DOM 
	更新效果作用之前对其进行处理的，传统方式。使用 EVENT{keypress} 
	事件的代码通常依赖于遗留的 {{KeyboardEvent/charCode}} 、 
	{{KeyboardEvent/keyCode}} 和 {{UIEvent/which}} 属性。

	请注意， EVENT{keypress} 事件是特定于按键事件的，并且已被 
	EVENT{beforeinput} 和 EVENT{input} 事件的更通用的事件序列所取代(见 
	[[#events-keyboard-event-order]] )。这些新的 <code>input</code> 
	事件不是特定于键盘操作的，并且可以用于捕获用户输入，而不管原始(触发)源是什么。

	<div class="note custom-note">
	个人理解，使用 EVENT{beforeinput} 和 EVENT{input} 代替键盘事件顺序中的 
	EVENT{keypress} 相当于一种脱离硬件的抽象，它能更好的对虚拟键盘进行处理。
	</div>

	<h4 id="legacy-keyboardevent-event-types">遗留 {{KeyboardEvent}} 事件类型</h4>

		<h5 id="event-type-keypress"><dfn>keypress</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>keypress</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{KeyboardEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>多种: 
						启动 <a href="#text-composition-system">文本合成系统</a>; 
						(触发) EVENT{blur} 和 EVENT{focus} 事件;
						(触发) EVENT{DOMActivate} 事件;
						(触发)其它事件</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
									正在处理按键事件的焦点元素，或者如果没有元素焦点，就是 
									<a href="#body-element">body元素</a> (如果可用)，否则为
									<a href="#root-element">根元素</a> </li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{KeyboardEvent}}.{{UIEvent/which}} :
								按键的遗留数字码</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/charCode}} :
								事件的遗留字符值</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/keyCode}} :
								按键的遗留数字码</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/key}} :
								按下的键的键值。</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/code}} :
								与键在键盘上的物理位置相关联的码(code)值。</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/location}} :
								键在设备上的位置。</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/altKey}} :
								如果 KEYCAP{Alt} 修饰符处于激活状态，则为 <code>true</code> ，
								否则为 <code>false</code> </li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/shiftKey}} :
								如果 KEYCAP{Shift} 修饰符处于激活状态，则为 <code>true</code> ，
								否则为 <code>false</code> </li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/ctrlKey}} :
								如果 KEYCAP{Control} 修饰符处于激活状态，则为 <code>true</code> ，
								否则为 <code>false</code> </li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/metaKey}} :
								如果 KEYCAP{Meta} 修饰符处于激活状态，则为 <code>true</code> ，
								否则为 <code>false</code> </li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/repeat}} :
								<code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/isComposing}} :
								如果键事件作为合成会话(composition session)的一部分发生，则为 
								<code>true</code> ，否则为 <code>false</code> </li>
						</ul>
					</td>
				</tr>
			</table>

			如果 <a href="#user-agent">用户代理</a> 支持，并且当且仅当该键能正常产生  
			<a href="#character-value">字符值</a> 时，则 
			<span class="zh-upper">必须</span> 在按下这个键时派发此事件。
			EVENT{keypress} 事件类型是依赖设备的，
			取决于输入设备的功能以及它们在操作系统中的映射方式。

			此事件类型 <span class="zh-upper">必须</span> 在 
			<a href="#key-mapping">键映射</a> 之后生成。使用 
			<a href="#ime">输入法编辑器</a> 时， <span class="zh-upper">不得</span> 
			派发它。

			如果取消此事件，除了取消 <a href="#default-action">默认行为</a> 外，
			还应阻止 EVENT{input} 事件的触发。

			作者 <span class="zh-upper">应当</span> 使用 EVENT{beforeinput} 
			事件而不是遗留的 EVENT{keypress} 事件。

			<p class="note">
			传统上， EVENT{keypress} 事件与能检测到 
			<a href="#character-value">字符值</a> 的按键而非一个物理键相关联，
			并且在某些配置中可能不适用于所有键。
			</p>

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{keypress} 事件类型，
			但本规范 <a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			在编辑上下文时，作者可以转而使用 EVENT{beforeinput} 事件替代( 
			EVENT{keypress} )。
			</p>

	<h4 id="keypress-event-order">EVENT{keypress} 事件顺序</h4>

		EVENT{keypress} 事件类型 <span class="zh-upper">必须</span> 在 
		EVENT{keydown} 事件之后并且与同一个按键关联的 EVENT{keyup} 事件之前被派发。

		EVENT{keypress} 事件类型 <span class="zh-upper">必须</span> 在 
		EVENT{beforeinput} 事件之后并且与同一个按键关联的 EVENT{input} 
		事件之前被派发。

		以下示例演示了支持 EVENT{keypress} 事件的用户代理们的按键事件序列: 

		<div class="example">
		++---+-------------+------------------------+---------------------+--------------------------------+
		=| # | 事件类型    | {{KeyboardEvent}}<br/> | {{InputEvent}}<br/> | 注释                           |
		 |   |             | {{KeyboardEvent/key}}  | {{InputEvent/data}} |                                |
		 +---+-------------+-----------o------------+----------o----------+--------------------------------+
		+| 1 | keydown     | KEY_NOLINK{a}          |                     |                                |
		+| 2 | beforeinput |                        | GLYPH{a}            |                                |
		+| 3 | keypress    | KEY_NOLINK{a}          |                     |                                |
		+|   |             |                        |                     | <em>与该键相关的任何           |
		 |   |             |                        |                     | <a href="#default-action">     |
		 |   |             |                        |                     | 默认行为</a> , 例如在 DOM      |
		 |   |             |                        |                     | 中插入字符。</em>              |
		+| 4 | input       |                        |                     |                                |
		+| 5 | keyup       | KEY_NOLINK{a}          |                     |                                |
		++---+-------------+------------------------+---------------------+--------------------------------+
		</div>

<h3 id="legacy-mutationevent-events">Legacy {{MutationEvent}} events</h3>

	The mutation and mutation name event modules are designed to allow
	notification of any changes to the structure of a document, including
	attribute, text, or name modifications.

	<p class="note">
	None of the event types associated with the {{MutationEvent}} interface are
	designated as cancelable. This stems from the fact that it is very difficult
	to make use of existing DOM interfaces which cause document modifications if
	any change to the document might or might not take place due to cancelation
	of the resulting event. Although this is still a desired capability, it was
	decided that it would be better left until the addition of transactions into
	the DOM.
	</p>

	Many single modifications of the tree can cause multiple mutation events to
	be dispatched. Rather than attempt to specify the ordering of mutation
	events due to every possible modification of the tree, the ordering of these
	events is left to the implementation.

	<div class="warning">
	<p>
	The {{MutationEvent}} interface was introduced in DOM Level 2 Events, but
	has not yet been completely and interoperably implemented across <a>user
	agents</a>. In addition, there have been critiques that the interface, as
	designed, introduces a performance and implementation challenge.
	</p>
	<p>
	DOM4 [[!DOM]] provides a new mechanism using a
	<code>MutationObserver</code> interface which addresses the use cases that
	mutation events solve, but in a more performant manner. Thus, this
	specification describes mutation events for reference and completeness of
	legacy behavior, but <a>deprecates</a> the use of the {{MutationEvent}}
	interface.
	</p>
	</div>

	<h4 id="interface-mutationevent">Interface MutationEvent</h4>

		<p class="intro-dom">Introduced in DOM Level 2, deprecated in this
		specification</p>

		The <code>MutationEvent</code> interface provides specific contextual
		information associated with Mutation events.

		To create an instance of the <code>MutationEvent</code> interface, use
		the {{Document/createEvent()}} method call.

		<pre class="idl">
		interface MutationEvent : Event {
		  // attrChangeType
		  const unsigned short MODIFICATION = 1;
		  const unsigned short ADDITION = 2;
		  const unsigned short REMOVAL = 3;

		  readonly attribute Node? relatedNode;
		  readonly attribute DOMString prevValue;
		  readonly attribute DOMString newValue;
		  readonly attribute DOMString attrName;
		  readonly attribute unsigned short attrChange;

		  undefined initMutationEvent();
		};
		</pre>

		<dl dfn-for="MutationEvent" data-noexport>
			<dt><dfn const>MODIFICATION</dfn></dt>
			<dd>
				The <code>Attr</code> was modified in place.
			</dd>

			<dt><dfn const>ADDITION</dfn></dt>
			<dd>
				The <code>Attr</code> was just added.
			</dd>

			<dt><dfn const>REMOVAL</dfn></dt>
			<dd>
				The <code>Attr</code> was just removed.
			</dd>

			<dt><dfn attribute>relatedNode</dfn></dt>
			<dd>
				<code>relatedNode</code> MUST be used to identify a secondary
				node related to a mutation event. For example, if a mutation
				event is dispatched to a node indicating that its parent has
				changed, the <code>relatedNode</code> will be the changed
				parent. If an event is instead dispatched to a subtree
				indicating a node was changed within it, the
				<code>relatedNode</code> MUST be the changed node. In the case
				of the EVENT{DOMAttrModified} event, it indicates the
				<code>Attr</code> node which was modified, added, or removed.

				The <a>un-initialized value</a> of this attribute MUST be
				<code>null</code>.
			</dd>

			<dt><dfn attribute>prevValue</dfn></dt>
			<dd>
				<code>prevValue</code> indicates the previous value of the
				<code>Attr</code> node in EVENT{DOMAttrModified} events, and of
				the <code>CharacterData</code> node in
				EVENT{DOMCharacterDataModified} events.

				The <a>un-initialized value</a> of this attribute MUST be
				<code>""</code> (the empty string).
			</dd>

			<dt><dfn attribute>newValue</dfn></dt>
			<dd>
				<code>newValue</code> indicates the new value of the
				<code>Attr</code> node in EVENT{DOMAttrModified} events, and of
				the <code>CharacterData</code> node in
				EVENT{DOMCharacterDataModified} events.

				The <a>un-initialized value</a> of this attribute MUST be
				<code>""</code> (the empty string).
			</dd>

			<dt><dfn attribute>attrName</dfn></dt>
			<dd>
				<code>attrName</code> indicates the name of the changed
				<code>Attr</code> node in a EVENT{DOMAttrModified} event.

				The <a>un-initialized value</a> of this attribute MUST be
				<code>""</code> (the empty string).
			</dd>

			<dt><dfn attribute>attrChange</dfn></dt>
			<dd>
				<code>attrChange</code> indicates the type of change which
				triggered the EVENT{DOMAttrModified} event. The values can be
				<code>MODIFICATION</code>, <code>ADDITION</code>, or
				<code>REMOVAL</code>.

				The <a>un-initialized value</a> of this attribute MUST be
				<code>0</code>.

				<p class="note">
				There is no defined constant for the attrChange value of 0 (the
				un-initialized value).
				</p>
			</dd>

			<dt><dfn method>initMutationEvent()</dfn></dt>
			<dd>
				Initializes attributes of a <code>MutationEvent</code> object.
				This method has the same behavior as {{Event/initEvent()}}.

				<dl class="parameters">
					<dt>DOMString typeArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean bubblesArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean cancelableArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>Node? relatedNodeArg</dt>
					<dd>
						Specifies {{MutationEvent}}.<code>relatedNode</code>.
					</dd>

					<dt>DOMString prevValueArg</dt>
					<dd>
						Specifies {{MutationEvent}}.<code>prevValue</code>. This value MAY be the <a>empty string</a>.
					</dd>

					<dt>DOMString newValueArg</dt>
					<dd>
						Specifies {{MutationEvent}}.<code>newValue</code>.
						This value MAY be the <a>empty string</a>.
					</dd>

					<dt>DOMString attrNameArg</dt>
					<dd>
						Specifies {{MutationEvent}}.<code>attrName</code>.
						This value MAY be the <a>empty string</a>.
					</dd>

					<dt>unsigned short attrChangeArg</dt>
					<dd>
						Specifies {{MutationEvent}}.<code>attrChange</code>.
						This value MAY be <code>0</code>.
					</dd>
				</dl>
			</dd>
		</dl>

	<h4 id="legacy-mutationevent-event-types">Legacy {{MutationEvent}} event types</h4>

		The mutation event types are listed below.

		<h5 id="event-type-DOMAttrModified"><dfn>DOMAttrModified</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMAttrModified</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								element whose attribute is being modified</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the name of the changed <code>Attr</code> node</li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								the numerical code corresponding to the most applicable <code>attrChangeType</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								the <code>Attr</code> node that has been modified, added, or removed.</li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								new value of the attribute, if the <code>Attr</code> node has been added or modified</li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								previous value of the attribute, if the <code>Attr</code> node has been removed or modified</li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。after an
			<code>Attr.value</code> has been modified and after an
			<code>Attr</code> node has been added to or removed from an
			<code>Element</code>. The <a>event target</a> of this event MUST be
			the <code>Element</code> node where the change occurred. It is
			implementation dependent whether this event type occurs when the
			children of the <code>Attr</code> node are changed in ways that do
			not affect the value of <code>Attr.value</code>.

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMAttrModified}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

		<h5 id="event-type-DOMCharacterDataModified"><dfn>DOMCharacterDataModified</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMCharacterDataModified</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Text</code>, <code>Comment</code>, <code>ProcessingInstruction</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								object whose content is being modified</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								<code>0</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								parent node of the object whose content is being modified</li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								new value of the object</li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								previous value of the object</li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。after
			<code>CharacterData.data</code> or
			<code>ProcessingInstruction.data</code> have been modified, but the
			node itself has not been inserted or deleted. The <a>event
			target</a> of this event MUST be the <code>CharacterData</code> node
			or the <code>ProcessingInstruction</code> node.

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMCharacterDataModified}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

		<h5 id="event-type-DOMNodeInserted"><dfn>DOMNodeInserted</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMNodeInserted</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>DocumentType</code>,
						<code>ProcessingInstruction</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								element which is being inserted</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								<code>0</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								parent node of the node that has been inserted, or the <code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								the <a>empty string</a></li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。type when a node other
			than an <code>Attr</code> node has been added as a child of another
			node. A <a>user agent</a> MAY dispatch this event when an
			<code>Attr</code> node has been added to an <code>Element</code>
			node (see <a href="#DOMNodeInserted-attr">note</a> below). This
			event MUST be dispatched after the insertion has taken place. The
			<a>event target</a> of this event MUST be the node being inserted.

			<p class="note" id="DOMNodeInserted-attr">
			For detecting attribute insertion, use the EVENT{DOMAttrModified}
			event type instead.
			</p>

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMNodeInserted}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

		<h5 id="event-type-DOMNodeInsertedIntoDocument"><dfn>DOMNodeInsertedIntoDocument</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMNodeInsertedIntoDocument</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>No</td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>DocumentType</code>,
						<code>ProcessingInstruction</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								element which is being inserted</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								<code>0</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								parent node of the node that has been inserted, or the <code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								the <a>empty string</a></li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。when a node has been
			inserted into a document, either through direct insertion of the
			node or insertion of a subtree in which it is contained. A <a>user
			agent</a> MAY  treat an <code>Attr</code> node as part of an
			<code>Element</code>'s subtree. This event MUST be dispatched after
			the insertion has taken place. The <a>event target</a> of this event
			MUST be the node being inserted. If the node is being directly
			inserted, the event type EVENT{DOMNodeInserted} MUST occur before
			this event type.

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMNodeInsertedIntoDocument}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

		<h5 id="event-type-DOMNodeRemoved"><dfn>DOMNodeRemoved</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMNodeRemoved</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>DocumentType</code>,
						<code>ProcessingInstruction</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								element which is being removed</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								<code>0</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								the parent node of the node being removed, or the <code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								the <a>empty string</a></li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。when a node other than
			an <code>Attr</code> node is being removed from its parent node. A
			<a>user agent</a> MAY dispatch this event when an <code>Attr</code>
			node is being removed from its <code>ownerElement</code> (see <a
			href="#DOMNodeRemoved-attr">note</a> below). This event MUST be
			dispatched before the removal takes place. The <a>event target</a>
			of this event MUST be the node being removed.

			<p class="note" id="DOMNodeRemoved-attr">
			For reliably detecting attribute removal, use the
			EVENT{DOMAttrModified} event type instead.
			</p>

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMNodeRemoved}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

		<h5 id="event-type-DOMNodeRemovedFromDocument"><dfn>DOMNodeRemovedFromDocument</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMNodeRemovedFromDocument</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>No</td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>DocumentType</code>,
						<code>ProcessingInstruction</code></td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								element which is being removed</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								<code>0</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								the parent node of the node being removed, or the <code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								the <a>empty string</a></li>
						</ul>
					</td>
				</tr>
			</table>

			<a href="#user-agent">用户代理</a> <span class="zh-upper">必须</span> 
			派发此事件。when a node is being
			removed from a document, either through direct removal of the node
			or removal of a subtree in which it is contained. A <a>user
			agent</a> MAY treat an <code>Attr</code> node as part of an
			<code>Element</code>'s subtree. This event MUST be dispatched before
			the removal takes place. The <a>event target</a> of this event type
			MUST be the node being removed. If the node is being directly
			removed, the event type EVENT{DOMNodeRemoved} MUST occur before this
			event type.

			<p class="note">
			For reliably detecting attribute removal, use the
			EVENT{DOMAttrModified} event type instead.
			</p>

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMNodeRemovedFromDocument}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

		<h5 id="event-type-DOMSubtreeModified"><dfn>DOMSubtreeModified</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>类型</th>
					<td><strong><code>DOMSubtreeModified</code></strong></td>
				</tr>
				<tr>
					<th>接口</th>
					<td>{{MutationEvent}}</td>
				</tr>
				<tr>
					<th>同步 / 异步</th>
					<td>同步</td>
				</tr>
				<tr>
					<th>冒泡</th>
					<td>能 </td>
				</tr>
				<tr>
					<th>可信目标对象</th>
					<td><a><code>Window</code></a>, <code>Document</code>, <code>DocumentFragment</code>, <code>Element</code>, <code>Attr</code>
					</td>
				</tr>
				<tr>
					<th>可取消<br/>默认行为</th>
					<td>No</td>
				</tr>
				<tr>
					<th>能否从Shadow<br/>DOM冒泡传递</th>
					<td>No</td>
				</tr>
				<tr>
					<th>默认行为</th>
					<td>None</td>
				</tr>
				<tr>
					<th>上下文<br/>(可信事件)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								parent node of subtree being modified</li>
							<li>{{MutationEvent}}.<code>attrName</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>attrChange</code> :
								<code>0</code></li>
							<li>{{MutationEvent}}.<code>relatedNode</code> :
								<code>null</code></li>
							<li>{{MutationEvent}}.<code>newValue</code> :
								the <a>empty string</a></li>
							<li>{{MutationEvent}}.<code>prevValue</code> :
								the <a>empty string</a></li>
						</ul>
					</td>
				</tr>
			</table>

			This is a general event for notification of all changes to the
			document. It can be used instead of the more specific mutation and
			mutation name events. It MAY be dispatched after a single
			modification to the document or, at the implementation's discretion,
			after multiple changes have occurred. The latter case SHOULD
			generally be used to accommodate multiple changes which occur either
			simultaneously or in rapid succession. The target of this event MUST
			be the lowest common parent of the changes which have taken place.
			This event MUST be dispatched after any other events caused by the
			mutation(s) have occurred.

			<p class="warning">
			为了(规范的)参考引用和完整性，本规范中定义了 EVENT{DOMSubtreeModified}
			<a href="#event-type">事件类型</a> ，但本规范 
			<a href="#deprecates">反对(deprecates)</a> 使用此事件类型。
			</p>

</section>
