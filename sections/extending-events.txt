<section>
<h2 id="extending-events">扩展事件</h2>


<em>本节内容不是规范的</em>

<h3 id="extending-events-intro">简介</h3>

	本规范定义了数个接口和许多事件，但是，这并不是一组适用所有功能(purposes)
	而面面俱到的(exhaustive)事件集合。为了允许内容作者和实现者添加期望的功能
	(desired functionality)，本规范提供了两种机制来扩展这组接口和事件，
	并且不会产生冲突: <a href="#extending-events-Custom_Events">自定义事件/a> 
	和 <a href="#extending-events-Impl_Extensions">实现特定
	(implementation-specific)的扩展</a> 。

<h3 id="extending-events-Custom_Events">自定义事件</h3>

	脚本作者 <span class="zh-upper">可以</span> 用对应用程序结构(architecture)
	有意义的事件类型来定义功能组件(functional components)方面的应用程序。
	内容作者可以使用 {{CustomEvent}} 接口创建自己的事件，
	这些事件适用于(appropriate to)他们正在使用的抽象(abstraction)层次。

	<div class="example">
		内容作者可能创建了一个应用程序，该应用程序具有动态生成的条形图(bar chart)。
		此条形图应每 5 分钟更新一次，或者当订阅源(feed)显示新信息时，
		或者当用户单击按钮手动刷新时(会额外更新)。当需要更新图表时，
		必须调用数个处理程序(handlers): 应用程序必须获取最新数据，
		向用户显示事件正在更新的图标，并重建图表。要对此进行控制，
		内容作者可以选择创建一个自定义的 <q>updateChart</q> 事件，
		只要满足以上触发(trigger)条件之一，就会触发该事件: 

		<pre><code>
		var chartData = ...;
		var evt = document.createEvent("CustomEvent");
		evt.initCustomEvent( "updateChart", true, false, { data: chartData });
		document.documentElement.dispatchEvent(evt);
		</code></pre>
	</div>

<h3 id="extending-events-Impl_Extensions">实现特定(implementation-specific)
的扩展</h3>

	当一个新事件正在设计和原型化时，或者当一个事件旨在实现特定的功能时，最好将其与标准化事件区分开来。实现者应该用一个短字符串作为特定于其实现的事件类型的前缀，以将其与其他实现中的同一事件以及标准化事件区分开来。这类似于CSS中供应商特定的关键字前缀，尽管在CSS中没有使用破折号（“-”），因为在Javascript中用作属性名称时可能会导致问题。
	While a new event is being designed and prototyped, or when an event is
	intended for implementation-specific functionality, it is desirable to
	distinguish it from standardized events. Implementors SHOULD prefix event
	types specific to their implementations with a short string to distinguish
	it from the same event in other implementations and from standardized
	events. This is similar to the
	<a href="http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords" title="CSS 2.1: Syntax and basic data types">vendor-specific keyword prefixes</a>
	in CSS, though without the dashes (<code>"-"</code>) used in CSS, since that
	can cause problems when used as an attribute name in Javascript.

	<div class="example">
		A particular browser vendor, <q>FooCorp</q>, might wish to introduce a
		new event, <code class="eventtype">jump</code>. This vendor implements
		<code class="eventtype">fooJump</code> in their browser, using their
		vendor-specific prefix: <code>"foo"</code>. Early adopters start
		experimenting with the event, using
		<code>someElement.addEventListener("fooJump", doJump, false )</code>,
		and provide feedback to FooCorp, who change the behavior of <code
		class="eventtype">fooJump</code> accordingly.

		After some time, another vendor, <q>BarOrg</q>, decides they also want
		the functionality, but implement it slightly differently, so they use
		their own vendor-specific prefix, <code>"bar"</code> in their event type
		name: <code class="eventtype">barJump</code>. Content authors
		experimenting with this version of the <code
		class="eventtype">jump</code> event type register events with BarOrg's
		event type name. Content authors who wish to write code that accounts
		for both browsers can either register each event type separately with
		specific handlers, or use the same handler and switch on the name of the
		event type. Thus, early experiments in different codebases do not
		conflict, and the early adopter is able to write easily-maintained code
		for multiple implementations.

		Eventually, as the feature matures, the behavior of both browsers
		stabilizes and might converge due to content author and user feedback or
		through formal standardization. As this stabilization occurs, and risk
		of conflicts decrease, content authors can remove the forked code, and
		use the <code class="eventtype">jump</code> event type name (even before
		it is formally standardized) using the same event handler and the more
		generic registration method <code>someElement.addEventListener( "jump",
		doJump, false)</code>.
	</div>

	<h4 id="extending-events-prefixes">Known Implementation-Specific Prefixes</h4>

		At the time of writing, the following event-type name prefixes are known to exist:

		++---------------------+------------+-----------------------+
		=| Prefix              | Web Engine | Organization          |
		 +---------------------+------------+-----------------------+
		+| <code>moz</code>,   | Gecko      | Mozilla               |
		 | <code>Moz</code>    |            |                       |
		+| <code>ms</code>,    | Trident    | Microsoft             |
		 | <code>MS</code>     |            |                       |
		+| <code>o</code>,     | Presto     | Opera Software        |
		 | <code>O</code>      |            |                       |
		+| <code>webkit</code> | WebKit     | Apple, Google, others |
		++---------------------+------------+-----------------------+

</section>
