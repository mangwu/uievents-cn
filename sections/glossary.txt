<section>
<h2 id="glossary">术语表</h2>

以下一些术语定义是从其他 W3C 或标准文档中的类似定义中借用或修改而来。
请参阅定义中的链接以获取更多信息。


: <dfn>activation behavior</dfn>
::	激活行为: 当一个 <a href="#event">事件</a> (通常由用户通过输入设备发起)
	引发元素完成指定的任务时所执行的操作。该任务为引发元素定义， 
	它<span class="zh-upper">可以</span> 通过 <a href="#host-language">宿主语言</a> 
	定义，或者通过开发者自定义的变量定义，也可以同时由两者定义。
	任何引发元素的默认任务 <span class="zh-upper">可以</span> 
	是一个通用操作，或者说引发元素的任务 <span class="zh-upper">可以</span> 是唯一的。
	例如， HTML 或 SVG 的 <code>&lt;a&gt;</code> 元素的激活行为是使 
	<a href="#user-agent">用户代理</a> 遍历 <code>href</code> 属性中指定的链接，
	并使用另一个可选参数( <code>target</code> 属性)指定遍历后进入的浏览上下文
	(如当前窗口或选项卡、一个命名窗口或新窗口)。
	<code>type</code> 属性值为 <code>submit</code> 的 HTML <code>&lt;input&gt;</code> 
	元素的激活行为是通过开发者定义的 HTTP 方法将表单元素的值发送给开发者定义的 
	IRI 。参见 [[#event-flow-activation]] 以了解更多详细信息。

	<p class="note custom-note">
	IRI 全称 <code>Internationalized Resource Identifier</code> ——国际化资源标识符，
	它是一种互联网协议标准，它建立在统一资源标识符(URI)协议的基础上，
	极大地扩展了允许的字符集。详情参考 
	<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#iri">
	MDN-SVG-Content_type#IRI</a> 和 
	<a href="https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier">
	En-Wikipedia-IRI</a> 。
	</p>

: <dfn>activation trigger</dfn>
::	激活触发器，被定义为发起 <a href="#activation-behavior">激活行为</a> 的事件。
	参考 [[#event-flow-activation]] 以了解更多详细信息。

: <dfn>author</dfn>
::	在本规范的上下文中， <em>作者</em> 、 <em>内容作者</em> 
	或 <em>脚本作者</em> 是编写脚本或编写，使用本规范中定义的接口、
	事件和事件流的可执行内容的人员。参见 一致性类别中的 [[#conf-authors]] 
	了解更多细节。
	<p class="note custom-note">
		可以理解成 Web 内容开发者，前端开发者
	</p>

: <dfn>body element</dfn>
::	在 HTML 或 XHTML 文档中，body元素表示文档的内容。在格式良好的 HTML 
	文档中，body元素是 <a href="#root-element">根元素</a> 的第一个子元素。

: <dfn lt="bubble phase|bubbling phase">bubbling phase</dfn>
::	冒泡阶段: <a href="#event">事件</a> 在由事件目标处理 <em>之后</em> ，
	可以被目标的祖先节点之一处理的过程。获取更多相关的详细信息，
	请参阅事件流上下文中对 <a href="#bubble-phase">冒泡阶段</a> 的描述。

: <dfn>capture phase</dfn>
::	捕获阶段: <a href="#event">事件</a> 在由事件目标处理 <em>之前</em> ，
	可以被目标的祖先节点之一处理的过程。获取更多相关的详细信息，
	请参阅事件流上下文中对 <a href="#capture-phase">捕获阶段</a> 的描述。

: <dfn>character value</dfn>
::	在键值的上下文中，字符值是表示一个或多个 Unicode 字符的字符串，
	例如一个字母或符号，或一组字母，每个字符都属于一组有效的 
	<a href="#unicode-character-categories">Unicode 字符类别</a> 。在本规范中，
	字符值表示为 unicode 字符串(例如，NI{U+0020})或同一码点(code point)的字形表示
	(例如，GLYPH{&nbsp;})，并且字符值会进行颜色编码以帮助区分这两种表示。

	<p class="note">
	在源代码中，一些键值，例如非图形字符，
	可以通过正在使用的编程语言的字符转义语法来表示。
	use.
	</p>

: <dfn>current event target</dfn>
::	当前事件对象: 在事件流中，当前事件目标是与当前正在派发的
	<a href="#event-handler">事件处理程序</a> 关联的对象。此对象
	<span class="zh-upper">可以</span> 是 <a href="#event-target">事件目标</a> 
	本身或其祖先之一。当前事件目标随着 <a href="#event">事件</a> 在事件流的各个
	<a href="#phase">阶段</a> 从一个对象传播到另一个对象而变化。当前事件目标是
	{{Event/currentTarget}} 属性的值。

: <dfn>dead key</dfn>
::	死键是一个键或键的组合(combination)，它本身不产生字符，
	但与另一个键组合(击键)或按顺序(击键)产生一个修饰后的字符，
	例如带有变音标记的字符(例如， GLYPH{&#xF6;} 、 GLYPH{&#xE9;} 、 
	GLYPH{&#xE2;} )。

: <dfn>default action</dfn>
::	<a href="#default-action">默认行为</a> 是一种 <span class="zh-upper">可选的</span> 
	补充行为，它的实现 <span class="zh-upper">必须</span> 与事件对象的派发合作执行。
	每个事件类型定义和每个规范都定义了该事件类型的默认行为(如果有的话)。
	在某些情况下，例如与 <a href="#activation-trigger">激活触发器</a> 
	关联时，事件的实例 <span class="zh-upper">可以</span> 具有多个 
	<a href="#default-action">默认行为</a> 。 <span class="zh-upper">可以</span> 
	通过调用 {{Event/preventDefault()}} 方法来取消 
	<a href="#default-action">默认行为</a>  。更多详细信息，请参见 
	[[#event-flow-default-cancel]] 。

: <dfn>delta</dfn>
::	为响应支持 {{WheelEvent}} 接口的输入设备(如鼠标滚轮或触摸板)的物理移动，
	用户代理将滚动或缩放页面，对这种滚动或缩放页面的滚动量
	(以像素、行或页为单位)估计就称为 <a href="#delta">delta</a> 。
	<a href="#delta">delta</a> 的值(例如， {{WheelEvent/deltaX}} 、 
	{{WheelEvent/deltaY}} 或 {{WheelEvent/deltaZ}} 属性)将在当前 
	{{WheelEvent/deltaMode}} 属性的背景中进行解释。 
	滚轮(或其他设备)的物理运动与 <a href="#delta">delta</a> 
	是正值还是负值之间的关系取决于环境和设备。但是，如果用户代理将滚动作为 
	<a href="#default-action">默认行为</a> ，则 <a href="#delta">delta</a> 
	的符号由右手坐标系给出，其中正 X 、 Y 和 Z 轴分别指向 
	<a href="#document">文档</a> 的最右边、最底边和最远深度(远离用户)。

: <dfn lt="deprecates|deprecated">deprecated</dfn>
::	标记为弃用的特性包含在规范中，作为对旧实现或规范的参考，但它们是
	<span class="zh-upper">可选的</span> ，不鼓励使用。在本规范中，
	只有已存在或正在进行替换的特性才 <span class="zh-upper">必须</span> 弃用。
	为了向后兼容已存在的内容(使用了弃用特性的代码)，尚未支持最新特性的实现 
	<span class="zh-upper">可以</span> 实现弃用特性，但创建内容的开发者 
	<span class="zh-upper">不应</span> 使用弃用特性，
	除非没有其他方法来解决使用场景。引用本规范的其他规范 
	<span class="zh-upper">不应</span> 使用弃用特性，而 
	<span class="zh-upper">应当</span> 转向弃用该特性的替代。
	此规范中标记为不推荐使用的特性预计将从未来的规范中删除。

: <dfn>dispatch</dfn>
::	创建一个事件，事件对象的属性和方法适宜于事件的事件类型和上下文，
	并以规定的方式在 DOM 树中传播它。可与术语 <q><a>fire</a></q> 互换，例如，
	<q>触发一个 EVENT{click} 事件</q> 或<q>派发一个EVENT{load}事件</q>。

: <dfn>document</dfn>
::	实例化 {{Document}} 接口 [[DOM-Level-3-Core]] 的对象，表示整个HTML或XML文本文档。
	从概念上讲，它是文档树的根，并提供对文档数据的主要访问能力。

: <dfn>DOM application</dfn>
::	DOM 应用程序是由开发者编写或自动生成的脚本或代码，它利用本规范中描述的接口、
	方法、属性、事件和其他特性，以便在 <a href="#user-agent">用户代理</a> 
	中向用户展现动态或交互式内容，例如 Web 应用程序。

: <dfn>DOM Level 0</dfn>
::	The term <q>DOM Level 0</q> refers to a mix of HTML <a>document</a> functionalities,
	often not formally specified but traditionally supported as de facto
	standards, implemented originally by Netscape Navigator version 3.0 or
	Microsoft Internet Explorer version 3.0.  In many cases, attributes or
	methods have been included for reasons of backward compatibility with <q>DOM
	Level 0</q>.

: <dfn>empty string</dfn>
::	空字符串是类型为<code>DOMString</code>，长度为0的值，也就是说它是一个不包含任何字符的字符串
	(既没有打印字符也没有控制字符)。

: <dfn>event</dfn>
::	事件是某种发生的事情的表示(例如，在一个元素上呈现地的鼠标点击，
	一个元素的孩子节点的移除，或其他任何的可能性)，它与它的
	<a href="#event-target">事件目标</a> 相关联。每个事件都是一个特定
	<a href="#event-type">事件类型</a> 的实例化。

: <dfn>event focus</dfn>
::	事件焦点是文档中的一个特定元素或其他 <a href="#event-target">事件目标</a> 
	的一种接受性(receptivity)的和聚集性(concentration)的特殊状态。
	每个元素在聚焦时都有不同的行为，这取决于元素的功能，例如启动激活元素的引发效果
	(见于按钮或超链接)或切换状态(见于复选框)、文本输入的接收(见于文本表单字段)、
	或选定文本的复制。有关更多详细信息，请参见 [[#events-focusevent-doc-focus]] 。

: <dfn lt="focus ring">event focus ring</dfn>
::	事件焦点环是 <a href="#document">文档</a> 中一组有序的 
	<a href="#event-focus">事件焦点</a> 目标。 
	<a href="#host-language">宿主语言</a> <span class="zh-upper">可以</span> 
	定义一种或多种方法来确定(事件焦点)目标的顺序，例如文档顺序、
	每个焦点目标定义的数字索引、焦点目标之间的显式指针，或以上不同模式的混合。
	每个文档都 <span class="zh-upper">可以</span> 包含多个焦点环或有条件焦点环。
	通常，对于文档顺序或索引焦点环，焦点从最后一个焦点目标到第一个焦点目标进行
	<q>环绕</q> 。

: <dfn>event handler</dfn>
: <dfn>event listener</dfn>
::	事件监听器，事件处理程序: 一个实现 {{EventListener}} 接口并提供
	{{EventListener/handleEvent()}} 回调方法的对象。事件处理程序是特定于语言的。
	事件处理程序在特定对象 (<a href="#current-event-target">当前事件目标</a>) 
	的上下文中调用，并随事件对象本身一起提供。

	<p class="note">
	在JavaScript中，用户定义的函数被认为是实现 
	{{EventListener}} 接口的。因此，当用户定义的函数被调用时，
	事件对象将作为第一个参数提供给它。此外，JavaScript对象在定义 
	{{EventListener/handleEvent()}} 方法时也可以实现 {{EventListener}} 接口
	</p>

	<p class="note custom-note">
	在 {{EventTarget}} 接口定义中，{{EventTarget/addEventListener()}} 
	方法的第二个参数接收一个 <code>callback</code> 对象。为了方便代码开发，
	这个 <code>callback</code> 对象既可以是 {{EventListener}} 接口定义的回调函数，
	也可以是一个普通的函数，所以原文档规范的注释会声称"用户定义的函数被认为是实现 
	{{EventListener}} 接口的"。也就是说，事件监听器，事件处理程序就是传递给
	{{EventTarget/addEventListener()}} 的 <code>callback</code> 对象。但是，
	广义上来说事件监听器是一个 <q>更广泛的概念</q> ，参阅 [[DOM]] 规范中的
	<a href="https://dom.spec.whatwg.org/#concept-event-listener">事件监听器</a> 
	获取更多信息。
	</p>

: <dfn>event order</dfn>
::	事件顺序: 使用相同或相关的事件接口，来自同一事件源或进程的事件的发生顺序。
	例如，在一个有鼠标、轨迹板和键盘的环境中，
	这些输入设备中的每一个都将构成一个单独的事件源，并且每个都将遵循自己的事件顺序。
	紧随轨迹板上的一个 EVENT{mousedown} 事件触发的鼠标上的一个 EVENT{mouseup} 事件
	不会导致 EVENT{click} 事件。

	<p class="note">
	不同的事件顺序之间可能存在交互。例如，
	一个点击事件可能会被一个并发的 EVENT{keydown} 事件修改
	(例如，通过 KEYCAP{Shift} <code>+</code> EVENT{click} )。
	然而，这些不同事件源的事件顺序是不同的。

	某些接口的事件顺序与设备无关。例如，用户可以使用 KEYCAP{Tab} 
	键或用鼠标单击新的聚焦元素来更改焦点。在这种情况下，
	事件顺序取决于进程的状态，而不是能发起状态改变的设备的状态。

: <dfn>event phase</dfn>
::	参阅 <a href="#phase">阶段</a> 。

: <dfn>event target</dfn>
::	一个应用 [[#event-flow]]> 的 <a href="#event">事件</a> 
	的事件目标对象。事件目标对象是事件的 {{Event/target}} 属性的值。

: <dfn>event type</dfn>
::	<em>事件类型</em>是一个具有特定名称的 <a href="#event">事件对象</a>
	，它定义了特定的触发条件、属性和区别于其他事件类型的其它特征。例如，
	EVENT{click} 事件类型与 EVENT{mouseover} 或 EVENT{load} 类型具有不同的特性。
	事件类型作为事件对象上的 {{Event/type}} 属性公开。参见
	[[#event-types]] 了解更多详细信息。这个术语也常常引申为具体"事件"，
	例如 <em>EVENT{click}</em> 事件。

: <dfn>fire</dfn>
::	<a>dispatch</a>的同义词。

: <dfn>host language</dfn>
::	宿主语言: 任何集成了另一种语言的特性或API规范的语言，
	它同时规范性地引用原始规范而不是重新定义这些特性，
	并且仅以原始规范定义的方式扩展这些特性。
	源规范通常只打算在一种或多种宿主语言的上下文中实现，
	而不是作为一种独立的语言。例如，XHTML、HTML和SVG是UI Events的宿主语言，
	它们集成并扩展了本规范中定义的对象和模型。

: <dfn>hysteresis</dfn>
::	滞后，人机界面设计的一种特性，在一定的位置或时间范围内接受用户输入，以改善用户体验。
	例如，在用户双击鼠标按键时，允许其花费的时间有一定小偏差是时间上的滞后作用，
	如果用户操作鼠标指针从父窗口移动到子菜单，则不立即关闭嵌套菜单是位置上的滞后作用。

: <dfn>IME</dfn>
: <dfn>input method editor</dfn>
:: 	<em>输入法编辑器</em>(IME) ，也被称为<em>前端处理器</em>(front end processer)，
	是一种通过引导用户进行字典查找，在击键(key)和表意文字(ideographs or other characters，
	中日韩统一表意文字和其他字符)之间执行转换的输入应用程序，这种输入应用程序常在东亚语言
	(如中文，日语，韩语)中使用。一个输入法编辑器(<a href="#ime">IME</a>)也可被用于基于
	词语的单词补全，常用在移动设备上。参见本规范中用于讨论IMEs的 [[#keys-IME]] 。
	也可查看 <a href="#text-composition-system">文本合成系统</a> 。

: <dfn>key mapping</dfn>
::	键映射是将键值分配给特定键的过程，是多种因素组合的结果，
	包括操作系统和键盘布局(例如， <a>QWERTY</a> 、德沃夏克式键映射、西班牙语、
	马拉地语铭文(InScript)键盘、中文键盘等)的因素，并且还将所有 
	<a href="#modifier-key">修饰按键</a> ( KEYCAP{Shift} 、 KEYCAP{Alt} 等)和
	<a href="#dead-key">死键</a> 的状态纳入考虑因素。

: <dfn>key value</dfn>
::	A key value is a <a>character value</a> or multi-character string (such as
	KEY{Enter}, KEY{Tab}, or KEY{MediaTrackNext}) associated with a key in a
	particular state. Every key has a key value, whether or not it has a
	<a>character value</a>. This includes control keys, function keys,
	<a>modifier keys</a>, <a>dead keys</a>, and any other key. The key value of
	any given key at any given time depends upon the <a>key mapping</a>.

: <dfn>modifier key</dfn>
::	修饰符键可更改键的正常行为，例如生成不同大小写的字符(如 KEYCAP{Shift} 键)，
	或更改键触发的功能(如 KEYCAP{Fn} 键或 KEYCAP{Alt} 键)。参阅 [[#keys-modifiers]] 
	获取有关修饰符键的更多信息，并参阅 [[UIEvents-Key]] 中的 [=修饰符键值表格=] 
	以获取有效的修饰符键列表。

: <dfn lt="namespace URIs">namespace URI</dfn>
::	A <em>namespace URI</em> is a URI that identifies an XML namespace. This is
	called the namespace name in [[XML-Names11]]. See also sections 1.3.2
	<a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#baseURIs-Considerations"><em>DOM URIs</em></a>
	and 1.3.3
	<a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Namespaces-Considerations"><em>XML Namespaces</em></a>
	regarding URIs and namespace URIs handling and comparison in the DOM APIs.

: <dfn>phase</dfn>
::	在 <a href="#event">事件</a> 的上下文中，
	一个阶段是沿着 DOM 树从一个节点到另一个节点的逻辑遍历集，即
	从 <a>Window</a> 到 {{Document}} 对象、 <a href="#root-element">根元素</a> 
	，直到 <a href="#event-target">事件目标</a> ( 
	<a href="#capture-phase">捕获阶段</a> )前继续向下遍历，然后传到 
	<a href="#event-target">事件目标</a> 本身( 
	<a href="#target-phase">目标阶段</a> )，最后按照相反方向向上遍历同一个节点链
	( <a href="#bubble-phase">冒泡阶段</a> )。

: <dfn>propagation path</dfn>
::	传播路径: <a href="#event">事件</a> 对象在往返于 
	<a href="#event-target">事件目标</a> 的过程中会依次通过的
	<a href="#current-event-target">当前事件目标</a> 的有序集合。随着事件的传播，
	传播路径中的每个 <a href="#current-event-target">当前事件目标</a> 
	依次设置在 {{Event/currentTarget}} 中。传播路径最初由 
	<a href="#event-type">事件类型</a> 定义的一个或多个 
	<a href="#event-phase">事件阶段</a> 组成，但 
	<span class="zh-upper">可以</span> 被中断。传播路径也称为
	<em>事件目标链</em> 。

: <dfn>QWERTY</dfn>
::	QWERTY(发音为 <q>&#x2C8;kw&#x25C;rti</q> )是一种常见的键盘布局，
	之所以如此命名，是因为字母键最上面一排的前五个字符键是Q、W、E、R、T和Y。
	还有许多其他流行的键盘布局(包括德沃夏克(Dvorak)和科尔马克(Colemak)布局)，
	大多数是为本地化或人体工程学设计的。

	<div class="note custom-note">
	除了QWERTY的键盘布局外，还有 "QWERTZ" ， "AZERTY" 的键盘布局，
	它们表示的是以某种字母排序方向进行排列的键盘布局。
	<q>尽管有大量的键盘布局用拉丁字母书写的语言，
	但这些布局中的大多数都非常相似。根据A、M、Q、W、Y和Z键在键盘上的位置， 
	它们可以分为三个主要类别。这些布局通常以 D 行的前六个字母命名: AZERTY 、 QWERTY 、 
	QWERTZ 、 QZERTY 及其其它国家变体。</q> —— 维基百科 
	<a href="https://en.wikipedia.org/wiki/Keyboard_layout">Keyboard layout</a> 
	</div>

: <dfn>root element</dfn>
::	根元素， <a href="#document">文档</a> 的第一个元素节点，
	所有其他元素都是它的子元素。文档元素(就是 &lt;html&gt; 元素)。

: <dfn>rotation</dfn>
:: 使用 {{WheelEvent}} 接口指示输入设备上的增量更改。在某些设备上，
	<span class="zh-upper">可以</span> 是滚轮在字面意义上的旋转，而在其他设备上，
	它 <span class="zh-upper">可以</span> 是沿着平面移动，或按下特定按钮。

: <dfn>target phase</dfn>
::	The process by which an <a>event</a> can be handled by the <a>event
	target</a>. See the description of the <a>target phase</a> in the context of
	event flow for more details.

: <dfn>text composition system</dfn>
::	A software component that interprets some form of alternate input (such as a
	<a>input method editor</a>, a speech processor, or a handwriting recognition
	system) and converts it to text.

: <dfn>topmost event target</dfn>
::	The <a>topmost event target</a> MUST be the element highest in the rendering
	order which is capable of being an <a>event target</a>. In graphical user
	interfaces this is the element under the user's pointing device. A user
	interface's <q>hit testing</q> facility is used to determine the target. For
	specific details regarding hit testing and stacking order, refer to the
	<a>host language</a>.

: <dfn>Unicode character categories</dfn>
:: Unicode字符类别，为每个 Unicode 码点定义的"一般类别(General Category)"
	值的子集。该子集包含所有
	字母(Letter) (<abbr title="Letter, Lowercase">Ll</abbr>,
		<abbr title="Letter, Modifier">Lm</abbr>,
		<abbr title="Letter, Other">Lo</abbr>,
		<abbr title="Letter, Titlecase">Lt</abbr>,
		<abbr title="Letter, Uppercase">Lu</abbr>),
	数字(Number) (<abbr title="Number, Decimal Digit">Nd</abbr>,
		<abbr title="Number, Letter">Nl</abbr>,
		<abbr title="Number, Other">No</abbr>),
	标点(Punctuation) (<abbr title="Punctuation, Connector">Pc</abbr>,
		<abbr title="Punctuation, Dash">Pd</abbr>,
		<abbr title="Punctuation, Close">Pe</abbr>,
		<abbr title="Punctuation, Final quote">Pf</abbr>,
		<abbr title="Punctuation, Initial quote">Pi</abbr>,
		<abbr title="Punctuation, Other">Po</abbr>,
		<abbr title="Punctuation, Open">Ps</abbr>)
	符号(Symbol) (<abbr title="Symbol, Currency">Sc</abbr>,
		<abbr title="Symbol, Modifier">Sk</abbr>,
		<abbr title="Symbol, Math">Sm</abbr>,
		<abbr title="Symbol, Other">So</abbr>)
	的类别值。

: <dfn>un-initialized value</dfn>
::	未初始化值，表示任何还没有使用{{Event/initEvent()}}进行过初始化的事件的属性
	(例如{{Event/bubbles}} ，{{Event/currentTarget}})的值。
	一个新事件通过使用{{Document/createEvent()}}方法创建后，
	这个事件的属性会立即应用未初始化值。

: <dfn>user agent</dfn>
::	用户代理，是一个程序，例如浏览器或内容创作工具，通常在客户端机器运行，
	它代理用户对内容进行检索、解释、执行、呈现或创建。出于不同的目的，
	用户可以在不同的时间使用不同的用户代理对内容进行操作。请参阅 
	[[#conf-interactive-ua]] 和  [[#conf-authors]] ，以获得
	<em>符合(conforming)</em> 要求(规范)的用户代理的详细信息。

: <dfn>Window</dfn>
::	<code>Window</code>引用当前<a href="#document">文档</a>的浏览上下文的窗口代理对象
	(Window Proxy object)，窗口代理对象在
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]] 中定义。

</section>
