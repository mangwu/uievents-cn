<section>
<h2 id="keys">键盘事件和键值</h2>


本节包含有关键盘事件的必要信息：

*	键盘布局、映射和键值的说明。
*	键之间的关系，例如 <a href="#dead-key">死键</a> 或 修饰符键。
*	键盘事件和其默认行为之间的关系。
*	一组 <code>键</code> 值集合，以及如何扩展这集合的指导方针。

<p class="note">
本节使用塞尔维亚语拉丁字母和汉字(Kanji)字符，这些字符可能在本规范的 PDF 
版本或打印版本中被误传或不可用。
</p>

<h3 id="keyboard-input">键盘输入</h3>

	<em>本节内容不是规范的</em>

	每个键与整个键盘的关系有三个独立的方面，
	每个方面在不同型号和配置的键盘中都有所不同，尤其是地区不同时，键盘差异更大: 

	*	<strong>机械布局(Mechanical layout):</strong> 键盘上物理按键的尺寸、
		大小和位置
	*	<strong>视觉标记(Visual markings):</strong> 标记每个按键的标签(或 
		<em>图例(legends)</em> )
	*	<strong>功能映射:</strong> 每个键的抽象键值关联。

	本规范仅根据 <a href="#keys-keyvalues"><code>key</code></a> 值和 
	<a href="#keys-codevalues"><code>code</code></a> 值定义了功能映射，
	但简要描述了背景的 <a href="#key-legends">按键图例(key legends)</a> 。

	<h4 id="key-legends">按键图例</h4>

		<em>本节用于提供有用信息</em>

		按键图例是印在或浮雕在 <em><a href="#key-cap-custom-note">键帽</a></em> 
		(覆盖在键盘机械开关上的矩形"帽")上的视觉标记。
		这些标记通常由一次击键时将产生的一个或多个字符组成(如 GLYPH{G} 、 GLYPH{8} 
		或 GLYPH{ш} )，或指示该键功能的名称或符号(如向上的箭头 GLYPH{&#x21E7;} 
		表示 KEYCAP{Shift} 按键，或字符串 <code>"Enter"</code> 表示 KEYCAP{Enter} 
		按键)。按键通常由该标记表示(例如， <q>按下 <code>"Shift"</code> 和 
		<code>"G"</code> 键。</q> )。但是，请注意，按键的视觉外观与其数字化表示无关，
		在许多配置中可能完全不准确。甚至控制键和功能键(如 KEYCAP{Enter} )
		也可以映射到不同的功能，甚至可以映射为字符键。

		<p class="note">
		许多键盘通常包含不产生任何字符的键，即使该按键上的符号(按键图例)可能具有 
		Unicode 等效符号。例如， KEYCAP{Shift} 键(键帽上)可能带有符号
		GLYPH{&#x21E7;} ，其 Unicode 码点为 UNI{U+21E7} ，但按下 KEYCAP{Shift} 
		键不会产生此字符值，并且 KEYCAP{Shift} 没有 Unicode 码点。
		</p>

<h3 id="keys-codevalues">键码</h3>

	键码 ( {{KeyboardEvent/code}} )是键盘事件的属性，
	可用于识别与键盘事件相关联的物理键。它与 USB 使用 IDs 的相似之处在于，
	它提供了一个与供应商无关(vendor-neutral)的底层值(类似于扫描码[scancode])。

	{{KeyboardEvent/code}} 属性的主要目的是提供一种一致和连贯的方法 ——
	根据按键的物理位置来识别按键。此外，它还提供了一个稳定的名称
	(不受当前键盘状态的影响)，用于唯一标识键盘上的每个键。

	有效的 {{KeyboardEvent/code}} 值的列表在 [[!UIEvents-Code]] 中定义。

	<h4 id="code-motivation">定义 {{KeyboardEvent/code}} 属性的动机</h4>

		标准 PC 键盘有一组键(我们称之为<em> [=书写系统键=] </em>)，
		这些键根据用户选择的当前键盘布局生成不同的 {{KeyboardEvent/key}} 值。
		这种情况使得编写根据键的物理位置来检测标识键的代码变得困难，
		因为代码需要知道哪个键盘布局在生效，才能知道哪些 {{KeyboardEvent/key}} 
		值要检查。现实世界中的一个例子是一款想要使用 GLYPH{W} 、 GLYPH{A} 、 
		GLYPH{S} 和 GLYPH{D} 键来控制玩家移动的游戏。 {{KeyboardEvent/code}} 
		属性通过提供一个 <em>不受当前键盘布局影响的</em> 固定值来检查，
		从而解决了这个问题。

		此外， {{KeyboardEvent/key}} 属性中的值也取决于当前键盘状态。因此，
		被按下和释放的键相对于修饰键的顺序可能会影响存储在 {{KeyboardEvent/key}} 
		属性中的值。 {{KeyboardEvent/code}} 属性通过提供一个 
		<em>不受当前键盘布局影响的</em> 固定值来检查，从而解决了这个问题。

	<h4 id="relationship-between-key-code">{{KeyboardEvent/key}} 和 
	{{KeyboardEvent/code}} 之间的关系</h4>

		<dl>
			<dt>{{KeyboardEvent/key}}</dt>
			<dd> {{KeyboardEvent/key}} 属性是为那些对按下的键的含义感兴趣的用户设计的，
				需要考虑到当前的键盘布局(和IME; 死键被赋予一个唯一的 
				{{KeyboardEvent/key}} 值)。使用例子: 检测修饰键或的基本的修饰键(例如，
				响应键盘快捷键以执行操作)。
			</dd>

			<dt>{{KeyboardEvent/code}}</dt>
			<dd> {{KeyboardEvent/code}} 属性适用于对用户按下的键感兴趣的用户，
				而不考虑任何布局修饰。使用例子: 检测 WASD 键(例如，用于游戏中的移动控制)
				或捕获所有键(例如，在远程桌面客户端中，将所有键发送到远程主机)。
			</dd>
		</dl>

	<h4 id="code-examples"><code>code</code> 例子</h4>

		<div class="note custom-note" id="keyboard-layout-custom-note">
		以下关于键盘布局的类型，可以查阅 [=标准键盘布局=] 。<br/> 美式键盘布局: 
		标准 "101" 键盘布局; <br/> 日式键盘布局: 日式 "106" 键盘布局; <br/> 
		美式国际键盘布局:  备用 "101" 键盘布局; <br/> 英式键盘布局: 
		标准 "102" 键盘布局。
		</div>
		
		<div class="example">
			处理左右的Alt键

			++----------+----------------------+----------------------+------------------------------------------+
			=| 键盘布局 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释                                     |
			 |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                          |
			 +----------+----------o-----------+----------o-----------+------------------------------------------+
			+| 美式     | KEY{Alt}             | CODE{AltLeft}        | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}}  |
			+| 法语     | KEY{Alt}             | CODE{AltLeft}        | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}}  |
			+| 美式     | KEY{Alt}             | CODE{AltRight}       | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} |
			+| 法语     | KEY{AltGr}           | CODE{AltRight}       | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} |
			++----------+----------------------+----------------------+------------------------------------------+

			在本例中，检查 {{KeyboardEvent/key}} 属性允许匹配 KEYCAP{Alt} ，
			而不必担心按下了哪个 Alt 键 ( CODE{AltLeft} 或 CODE{AltRight} )。
			检查 {{KeyboardEvent/code}} 属性可以匹配右 Alt 键( CODE{AltRight} )，
			而无需担心当前正在使用的键盘布局。

			请注意，在法语示例中， KEYCAP{Alt} 和 KEYCAP{AltGr} 键保留其左右位置( 
			{{KeyboardEvent/code}} 值仍然是 CODE{AltLeft} 和 CODE{AltRight} )，
			即使每个键只有一个。
		</div>  <!-- Handling Left and Right Alt Keys -->

		<div class="example">
			处理单引号按键

			++----------+----------------------+----------------------+--------+
			=| 键盘布局 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释   |
			 |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|        |
			 +----------+----------o-----------+-----------o----------+--------+
			+| 美式     | KEY_NOLINK{'}        | CODE{Quote}          |        |
			+| 日式     | KEY_NOLINK{:}        | CODE{Quote}          |        |
			+| 美式国际 | KEY{Dead}            | CODE{Quote}          |        |
			++----------+----------------------+----------------------+--------+

			此示例显示了死键值是如何在属性中被编码的。 {{KeyboardEvent/key}} 
			值根据当前区域设置而变化，而 {{KeyboardEvent/code}} 属性则返回一致的值。
		</div><!-- Handling the Single Quote Key -->

		<div class="example" id="example-key-2">
			在各种键盘布局上处理 GLYPH{2} 键(按下 Shift 键和不按下 Shift 键)。

			++----------+----------------------+----------------------+----------------------------+
			=| Keyboard |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释                       |
			 |  Layout  |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                            |
			 +----------+----------o-----------+----------o-----------+----------------------------+
			+| 美式     | KEY_NOLINK{2}        | CODE{Digit2}         |                            |
			+| 美式     | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
			+| 英式     | KEY_NOLINK{2}        | CODE{Digit2}         |                            |
			+| 英式     | KEY_NOLINK{"}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
			+| 法语     | KEY_NOLINK{é}        | CODE{Digit2}         |                            |
			+| 法语     | KEY_NOLINK{2}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
			++----------+----------------------+----------------------+----------------------------+

			无论当前区域设置或修改键状态如何，在美式(US)键盘上键帽标签为 GLYPH{2} 
			的键总是会在 {{KeyboardEvent/code}} 属性中产生 CODE{Digit2} 。

		</div><!-- Handling the 2 Key -->

		<div class="example" id="example-key-shift-2">
			键盘事件序列:  KEYCAP{Shift} 和 KEYCAP{2}


			比较下面列出的两个(顺序不同)按键事件序列的属性值。它们都在美国键盘上产生 
			GLYPH{@} 字符，但按键释放的顺序不同。在第一个序列中，顺序为: 
			KEYCAP{Shift} (按下)， KEYCAP{2} (按下)、 KEYCAP{2} (释放)、 
			KEYCAP{Shift} (释放)。

			++---+----------+----------------------+----------------------+-----------------------------------------+
			=| # | 事件类型 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释                                    |
			 |   |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                         |
			 +---+----------+----------o-----------+----------o-----------+-----------------------------------------+
			+| 1 | keydown  | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			+| 2 | keydown  | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
			+| 3 | keypress | KEY_NOLINK{@}        | CODE{}               | (如果支持)                              |
			+| 4 | keyup    | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
			+| 5 | keyup    | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			++---+----------+----------------------+----------------------+-----------------------------------------+

			在第二个序列中， KEYCAP{Shift} 在 KEYCAP{2} 之前释放，
			从而产生以下事件顺序：KEYCAP{Shift} (按下)， KEYCAP{2} (按下)、 
			KEYCAP{Shift} (释放)、 KEYCAP{2} (释放)。

			++---+----------+----------------------+----------------------+-----------------------------------------+
			=| # | 事件类型 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释                                    |
			 |   |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                         |
			 +---+----------+----------o-----------+----------o-----------+-----------------------------------------+
			+| 1 | keydown  | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			+| 2 | keydown  | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
			+| 3 | keypress | KEY_NOLINK{@}        | CODE{}               | (如果支持)                              |
			+| 4 | keyup    | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			+| 5 | keyup    | KEY_NOLINK{2}        | CODE{Digit2}         |                                         |
			++---+----------+----------------------+----------------------+-----------------------------------------+

			请注意，在 GLYPH{2} 键的 EVENT{keydown} 和 EVENT{keyup} 事件之间的 
			{{KeyboardEvent/key}} 属性值不匹配。 {{KeyboardEvent/code}} 
			属性提供了一个不受当前修饰键状态影响的一致值。

		</div><!-- Sequence of Keyboard Events: Shift and 2 -->

	<h4 id="code-virtual-keyboards">{{KeyboardEvent/code}} 和虚拟键盘</h4>

		{{KeyboardEvent/code}} 属性的用处对于虚拟键盘(以及遥控器和和弦键盘)
		来说不太明显。通常，如果虚拟(或遥控器)键盘模仿标准键盘的布局和功能，
		则它还 <span class="zh-upper">必须</span> 适当地设置 {{KeyboardEvent/code}} 
		属性。对于不模仿标准键盘布局的键盘，则 {{KeyboardEvent/code}} 
		属性 <span class="zh-upper">可以</span> 设置为标准键盘上最接近的匹配项，也
		<span class="zh-upper">可以</span> 未定义。

		对于具有变化值特性的按键的虚拟键盘(这些按键根据某些修饰键状态产生不同的值)，
		{{KeyboardEvent/code}} 值应该是在设备处于出厂重置状态时按下按键(button)
		时产生的 {{KeyboardEvent/key}} 值。

<h3 id="keys-keyvalues">键盘事件 <code>key</code> 属性值</h3>

	键值是一个 <code>DOMString</code> ，它可以用来表示(indicate)
	键盘上的任何给定键，无论其位置或状态如何，通过它产生的值(来表示按键)。这些键值 
	<span class="zh-upper">可以</span> 用作实现生成的键盘事件的返回值，
	或者用作内容作者指定期望得到的输入(例如键盘快捷键)的输入值。

	有效 <code>key</code> 值的列表在 [[!UIEvents-Key]] 中定义。

	通过使用 {{KeyboardEvent/key}} 属性，键值被用于检测已按下的键的值。
	内容作者可以检索大写或小写字母、数字、符号或其他产生字符的键的 
	<a href="#character-value">字符值</a> ，也可以检索控制键、修饰符键、
	功能键或其他不产生字符的按键的 <a href="#key-value">键值</a> 。
	这些值可以用于: 监控特定的输入字符串; 用于检测和作用于结合了其他输入(例如鼠标)
	的修饰键输入; 用于创建虚拟键盘; 或用于任何数量的其他目的。

	键值也可以由内容作者在字符串比较中使用，能作为符合规范的
	<a href="#host-language">宿主语言</a> 的标记属性
	(如 HTML 的 <code>accesskey</code> )的值，或用于其他相关目的。符合规范的
	<a href="#host-language">宿主语言</a> <span class="zh-upper">应当</span> 
	允许内容作者使用两个等价字符串值中的任意一个作为键值: 
	<a href="#character-value">字符值</a> 或 <a href="#key-value">键值</a> 。

	<p class="note">
	虽然独立于平台或键盘布局映射的实现将使用键的最相关值，
	但内容作者不能对键盘设备生成它们的能力做出假设。
	当使用键盘事件和快捷键组合的键值时，内容作者可以 <q>考虑使用数字和功能键( 
	KEYCAP{F4} 、 KEYCAP{F5} 等)而不是字母</q> ( [[DWW95]] )，
	因为大多数键盘布局都会为这些键值提供键。
	</p>

	键值并不标识(indicate)物理键盘上的特定键，也不反映打印在按键上的字符
	(键帽标签)。键值表示的是: 考虑到在所有活动按键和键输入模式(包括换档模式 [shift 
	modes] )的当前状态下的按键事件的当前值(通过 {{KeyboardEvent/key}} 属性获取)，
	这个值反映在键盘的操作系统映射中，并报告给实现。换言之， <a>QWERTY</a> 
	键盘上键帽标签为 KEYCAP{O} 的键的键值在未换挡(unshifted)状态下具有键值 
	KEY_NOLINK{o} ，在换挡(shifted)状态下为键值 KEY_NOLINK{O} 。
	由于用户可以将其键盘映射到任意自定义配置，因此鼓励内容作者不要假设键的换档
	(shifted)和未换挡(unshifted)状态与字符的主要表示形式(大写或大写字母)
	和次要表示形式(小写或小写字母)之间存在关系，而是鼓励内容作者使用 
	{{KeyboardEvent/key}} 属性的值。例如， [[UIEvents-Code]] 中描述的标准 "102"
	键盘布局阐明了一个可能的键盘布局上的一组可能的 
	<a href="#key-mapping">键映射</a> 。还有许多其他存在的键盘布局，既有标准的，
	也有特殊的。

	<p class="note">
	为了简化 <a href="#dead-key">死键</a> 支持，当键盘的操作系统映射处理 
	<a href="#dead-key">死键</a> 状态时，不会通过 {{KeyboardEvent/key}} 
	属性报告死键序列的当前状态，相反，一个 KEY{Dead} 键值会被 
	{{KeyboardEvent/key}} 报告。取而代之的是(要获取死键序列状态)，实现会生成 
	<a href="#events-compositionevents">组合事件</a> ，事件中包含通过 
	{{CompositionEvent/data}} 属性报告的死键序列的中间状态。与前面的例子一样，
	<a>QWERTY</a> 键盘上键帽标签为 KEYCAP{O} 
	的键的按键值在操作死键以添加变音符号的期间，在未换挡(unshifted)状态下具有 
	<code class="char">"&#xF6;"</code> 的 {{CompositionEvent/data}} 属性值 ; 
	在操作死键以添加变音符号的期间，在换挡(shifted)状态下具有
	<code class="char">"&#xF6;"</code> 的 {{CompositionEvent/data}} 属性值。
	</p>

	同样重要到需要注意是，按键事件状态和键值之间没有一一对应的关系。
	一个特定的键值可能与多个键相关联。例如，许多标准键盘包含不止一个具有 
	KEYCAP{Shift} 键帽标签的键(通常通过 {{KeyboardEvent/location}} 值
	{{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} 和 
	{{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} 区分)或 KEYCAP{8} 键帽标签的键(通常由 
	{{KeyboardEvent/location}} 值 {{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}} 和 
	{{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}} 区分)，并且用户配置的自定义键盘布局
	<span class="zh-upper">可以</span> 在多个键状态(multiple key-state)
	场景中复用任何键值(请注意，{{KeyboardEvent/location}} 只用于标准键盘布局，
	并且不总能指示出有意义的区别)。

	最后，任何( {{KeyboardEvent/key}} )给定的字符表示(representation)
	的含义都是上下文相关的并且复杂的。例如，在某些上下文中，星号(星形)字形( 
	GLYPH{*} )表示脚注或强调(将一段文字括起来时)。然而，在一些文档或可执行程序中，
	它相当于数学乘法运算，而在其他文档或可运行程序中，该功能键预留为乘法符号( 
	GLYPH{&#xD7;} ，Unicode 值 UNI{U+00D7} )或小写拉丁字母 <code>"x"</code> 
	(由于许多键盘上没有乘法键，而且字形 GLYPH{&#xD7;} 和 GLYPH{x} 表面上很相似)。
	这样，字符表示(representation)的语义或功能不在本规范的论述范围内。

	<h4 id="keys-modifiers">修饰符按键</h4>
		
		<div class="note custom-note">
		关于 <q>Modifier keys</q> 的翻译和说明，可以参阅 
		<a href="#modifier-keys-custom-note">修饰符按键自定义注释</a> 。<br/>
		关于键盘布局的相关说明，可以参阅 <a href="#keyboard-layout-custom-note">键盘布局自定义注释</a> 
		</div>

		键盘输入使用修饰键来更改键的正常行为。与其他按键一样，修饰符按键生成 
		EVENT{keydown} 和 EVENT{keyup}事件，如下面的例子所示。
		某些修饰符在按键被按下或保持按下时被激活，如 KEYCAP{Alt} 、 KEYCAP{Control} 
		、 KEYCAP{Shift} 、 KEYCAP{AltGraph} 或 KEYCAP{Meta} 。
		其他修饰符会根据其状态激活，例如 KEYCAP{CapsLock} 、 KEYCAP{NumLock} 或 
		KEYCAP{ScrollLock}。当按下修饰键时，(这些按键对应的修饰)状态会发生变化。
		{{KeyboardEvent}} 接口为一些常见的修饰符键提供了方便的属性: 
		{{KeyboardEvent/ctrlKey}} 、 {{KeyboardEvent/shiftKey}} 、 
		{{KeyboardEvent/altKey}} 、 {{KeyboardEvent/metaKey}}。
		某些操作系统使用 KEYCAP{AltGraph} 和 KEYCAP{Control} 修饰键的组合来模拟 
		KEYCAP{AltGraph} 修饰键。鼓励实现使用 KEYCAP{AltGraph} 修饰符按键。

		<div class="example">
			此示例描述了与在使用美式(US)映射的美式(US)键盘上生成的 Unicode 字符 Q 
			(大写拉丁字母 Q ，Unicode 码点 UNI{U+0051} )相关联的可能的事件序列: 

			++---+-------------+----------------------+----------------------------+------------------------+
			=| # | 事件类型    |{{KeyboardEvent}}<br/>| 修饰符                     | 注释                  |
			 |   |             |{{KeyboardEvent/key}} |                            |                        |
			 +---+-------------+----------o-----------+-------------o--------------+------------------------+
			+| 1 | keydown     | KEY{Shift}           | {{KeyboardEvent/shiftKey}} |                        |
			+| 2 | keydown     | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} | 大写拉丁字母 Q         |
			+| 3 | beforeinput |                      |                            |                        |
			+| 4 | input       |                      |                            |                        |
			+| 5 | keyup       | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} |                        |
			+| 6 | keyup       | KEY{Shift}           |                            |                        |
			++---+-------------+----------------------+----------------------------+------------------------+
		</div>

		<div class="example">
			该示例描述了上述示例的键交替序列，其中 KEYCAP{Shift} 键在 KEYCAP{Q} 
			键之前释放。对于 EVENT{keyup} 事件， KEYCAP{Q} 键的键值将恢复为其未换挡
			(unshifted)的值: 

			++---+-------------+----------------------+----------------------------+------------------------+
			=| # | 事件类型    |{{KeyboardEvent}}<br/>| 修饰符                     | 注释                   |
			 |   |             |{{KeyboardEvent/key}} |                            |                        |
			 +---+-------------+----------o-----------+-------------o--------------+------------------------+
			+| 1 | keydown     | KEY{Shift}           | {{KeyboardEvent/shiftKey}} |                        |
			+| 2 | keydown     | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} | 大写拉丁字母 Q         |
			+| 3 | beforeinput |                      |                            |                        |
			+| 4 | input       |                      |                            |                        |
			+| 5 | keyup       | KEY{Shift}           |                            |                        |
			+| 6 | keyup       | KEY_NOLINK{q}        |                            | 小写拉丁字母 Q         |
			++---+-------------+----------------------+----------------------------+------------------------+
		</div>

		<div class="example">
			以下示例描述了一个可能的不生成 Unicode 字符的键序列
			(使用与上上个示例相同的配置):

			++---+-------------+----------------------+----------------------------+----------------------------+
			=| # | 事件类型    |{{KeyboardEvent}}<br/>| 修饰符                     | 注释                       |
			 |   |             |{{KeyboardEvent/key}} |                            |                            |
			 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
			+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 2 | keydown     | KEY_NOLINK{v}        | {{KeyboardEvent/ctrlKey}}  | 小写拉丁字母 V             |
			+|   |             |                      |                            | <em>不生成                 |
			 |   |             |                      |                            | EVENT{beforeinput} 或      |
			 |   |             |                      |                            | EVENT{input} 事件。</em>   |
			+| 3 | keyup       | KEY_NOLINK{v}        | {{KeyboardEvent/ctrlKey}}  | 小写拉丁字母 V             |
			+| 4 | keyup       | KEY{Control}         |                            |                            |
			++---+-------------+----------------------+----------------------------+----------------------------+

			<div class="note custom-note" id="example23-custom-note">
			在一般的操作系统上，KEYCAP{Ctrl} + KEYCAP{v} 是粘贴的快捷组合键，
			用户将剪贴板的内容粘贴到输入控件。无论剪贴板是否包含复制的内容，在 
			<a href="https://domeventviewer.com/key-event-viewer.html">
			键盘事件测试网站</a> 上测试， <strong>谷歌浏览器</strong> 
			(113.0.5672.129(正式版本) (64 位))都会派发 EVENT{beforeinput} 和 
			EVENT{input} 事件，而 <strong>火狐浏览器</strong> (113.0.2(64位))只在剪贴板有内容时才派发
			EVENT{beforeinput} 和 EVENT{input} 事件。<br/>
			当然，如果组合键的第二个按键不是 KEYCAP{v} ，而是非快捷组合按键，如 
			KEYCAP{i} ，则两个浏览器就如例子所述都不会触发 EVENT{beforeinput} 和 
			EVENT{input} 事件。因此，在考虑实际的事件发生情况时，
			要将修饰按键和字符数字按键组合形成组合按键纳入考虑范围。

			<figure id="figure-example23-beforeinput-and-input">
				<img
					src="images/example23-beforeinput-and-input.png"
					width="900"
					height="300"
					alt="谷歌浏览器在使用 Ctrl + v 按键时，会派发data属性值为null的 
					Event{beforeinput} 和 EVENT{input} 事件"
				/>
				<div class="custom-figcaption">
				谷歌浏览器在使用 KEYCAP{Ctrl} + KEYCAP{v} 按键时，会派发 
				{{InputEvent/data}}  为 <code>null</code> 的 EVENT{beforeinput} 和 
				EVENT{input} 事件
				</div>
			</figure>
			
			</div>

		</div>

		<div class="example">
			以下示例显示了同时按下 KEYCAP{Shift} 和 KEYCAP{Control} 时的事件序列: 

			++---+-------------+----------------------+----------------------------+----------------------------+
			=| # | 事件类型    |{{KeyboardEvent}}<br/>| 修饰符                     | 注释                       |
			 |   |             |{{KeyboardEvent/key}} |                            |                            |
			 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
			+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 2 | keydown     | KEY{Shift}           | {{KeyboardEvent/ctrlKey}}, |                            |
			 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
			+| 3 | keydown     | KEY_NOLINK{V}        | {{KeyboardEvent/ctrlKey}}, | 大写拉丁字母 V             |
			 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
			+|   |             |                      |                            | <em>不生成                 |
			 |   |             |                      |                            | EVENT{beforeinput} 或      |
			 |   |             |                      |                            | EVENT{input} 事件。</em>   |
			+| 4 | keyup       | KEY_NOLINK{V}        | {{KeyboardEvent/ctrlKey}}, | 大写拉丁字母 V             |
			 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
			+| 5 | keyup       | KEY{Shift}           | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 6 | keyup       | KEY{Control}         |                            |                            |
			++---+-------------+----------------------+----------------------------+----------------------------+

			<div class="note custom-note">
			这里的 EVENT{beforeinput} 或 EVENT{input} 事件的生成情况和例子23中的 
			<a href="#example23-custom-note">注释</a> 说明的情况一致，KEYCAP{Ctrl} + 
			KEYCAP{Shift} + KEYCAP{v} 组合按键仍然有粘贴的功能。除此之外，还有考虑加入
			KEYCAP{Shift} 后浏览器可能的其它快捷键对浏览器事件派发的影响，例如 
			KEYCAP{Ctrl} + KEYCAP{Shift} + KEYCAP{i} 
			组合快捷键可以打开浏览器的开发者工具(devTool)，打开后可能会阻止 
			EVENT{keyup} 事件的后续派发。
			</div>
			
		</div>

		<div class="example">
			对于非美式(non-US)键盘布局，事件序列相同，但键的值基于当前键盘布局。
			此示例显示了使用阿拉伯键盘布局时的事件序列:

			++---+-------------+----------------------+----------------------------+----------------------------+
			=| # | 事件类型    |{{KeyboardEvent}}<br/>| 修饰符                     | 注释                       |
			 |   |             |{{KeyboardEvent/key}} |                            |                            |
			 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
			+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 2 | keydown     | KEY_NOLINK{ر}        | {{KeyboardEvent/ctrlKey}}  | 阿拉伯字母 Reh             |
			+|   |             |                      |                            | <em>不生成                 |
			 |   |             |                      |                            | EVENT{beforeinput} 或      |
			 |   |             |                      |                            | EVENT{input} 事件。</em>   |
			+| 3 | keyup       | KEY_NOLINK{ر}        | {{KeyboardEvent/ctrlKey}}  | 阿拉伯字母 Reh             |
			+| 4 | keyup       | KEY{Control}         |                            |                            |
			++---+-------------+----------------------+----------------------------+----------------------------+
		</div>

		<p class="note">
		当按键按下时，触发的 EVENT{keydown} 和 EVENT{keyup} 
		事件中的值根据当前的键盘布局变化。这意味着美式布局上的 KEYCAP{v} 
		键和阿拉伯布局上的 KEYCAP{ر} 键将生成(具有)不同(键值)的事件，
		即使它们是相同的物理键。要将这些事件标识为来自同一个物理键，您需要使用 
		{{KeyboardEvent/code}} 属性。
		</p>

		在某些情况下， <a href="#modifier-key">修饰键</a> 会更改键事件的
		{{KeyboardEvent/key}} 值。例如，在一些 MacOS 键盘上，标签为 "delete" 
		的键在未修饰(unmodified)时的功能与 Windows 操作系统上的 KEYCAP{Backspace} 
		键相同，但当被 KEYCAP{Fn} 键修饰后，它充当 KEYCAP{Delete} 键，并且
		{{KeyboardEvent/key}} 的值将与当前修饰符状态下按键的最合适功能相匹配。

	<h4 id="keys-dead">死键</h4>

		<div class="note custom-note">
		死键(dead key)实际上属于修饰符按键，如下是一些参考解释: <br/>
		<q>它是电脑键盘或打字机上一种特殊的快捷键。
		它们通常用来对原始的拉丁字母加上附加符号。死键并不会输出一个完整的字母，
		而是改变下一个按下的键的输出结果。
		因此不需要为每一个字母与每一个标音的组合都对应一个单独的键; 
		只要为每一个标音对应一个死键便足够。举例来说，若键盘上有一个重音符( 
		KEYCAP{`} )的死键，要输出法文字母 à 只需要先按下 KEYCAP{`} ，再按下 
		KEYCAP{A} 。如果是 è 则是先按下 KEYCAP{`} 再按下 E 。而通常来说，通过键入 
		KEYCAP{`} 与 CODE{Space} 可以产生一个单独的标音符号。</q> —— 维基百科 
		<a href="https://zh.wikipedia.org/wiki/死键">死键</a> 。<br/>
		<q>基本上，美式标准键盘没有任何死键，
		所以沿用这种键盘的中国大陆地区使用的键盘也没有死键，
		但是世界上大多数地区销售的键盘都有一个 KEYCAP{AltGr} (Alternative graphic)键，
		它可以直接修改一些字母，并将其他字母变成死键(取决于键盘设置)。
		<q>旧的计算机系统，如 MSX ，通常有一个标记为死键的特殊键，它与 KEYCAP{Ctrl} 
		键和 KEYCAP{Shift} 键相结合，可以用来将西欧语言中常见的一些变音符号(
		<code>´</code> 、 <code>`</code> 、 <code>ˆ</code> 和 <code>¨</code> 
		)添加到随后键入的元音中。</q> —— 维基百科 
		<a href="https://en.wikipedia.org/wiki/Dead_key">Dead key</a>
		</div>

		一些键盘输入使用 <a href="#dead-key">死键</a> 来输入合成字符序列(composed
		character sequences)。与在手写序列(见 [[#events-composition-handwriting]] 
		)中，用户可以首先输入基本字符不同，键盘输入需要在按下 
		<a href="#dead-key">死键</a> 时进入特殊状态，并且只有在输入有限数量的 
		<q>合法(legal)</q> 基本字符中的一个时才发出(emit)字符。

		<p class="note">
		MacOS 和 Linux 操作系统使用输入法来处理 <a href="#dead-key">死键</a> 。
		</p>

		<a href="#dead-key">死键</a> (在所有键盘布局和映射中)由键值 KEY{Dead} 表示。
		为了响应任何死键的按下，<a href="#events-compositionevents">合成事件</a> 
		必须由用户代理派发，并且 EVENT{compositionupdate} 事件的 
		{{CompositionEvent/data}} 值必须是死键组合序列的当前状态的字符值。

		虽然 Unicode [=组合字符=] 总是遵循手写顺序 —— 组合字符在相应的字母后面，
		但典型的死键输入 <span class="zh-upper">可以</span> 颠倒顺序 —— 
		将组合字符放在对应的字母前面。例如，单词 <em>naïve</em> 使用组合分音符号
		(combining diacritic) <em>¨</em> ，在 Unicode (编码)中按顺序表示为 
		<em>nai¨ve</em> ，但(在输入这个单词的过程中) 
		<span class="zh-upper">可以</span> 键入 <em>na¨ive</em> 。击键(keystrokes)
		序列 UNI{U+0302} (组合扬抑音符(Combining Circumflex Accent)键)和 UNI{U+0065}
		(用小写拉丁字母 E 作为标签的键)很可能会产生
		(在使用法语映射且未激活任何修饰符的法语键盘上) Unicode 字符 GLYPH{&#xEA;} 
		(带扬抑符(Circumflex)的小写拉丁字母 E )，这是 Unicode 规范化形式
		(Unicode Normalization Form) <em>NFC</em> 的首选。

		<div class="note custom-note">
		扬抑符(Circumflex， <code class="IPA">◌̂</code> )，分音符(Diacritic， 
		<code class="IPA">◌̈</code>)，
		是某些文字罗马化和音译方案所使用的拉丁字母和希腊字母的 
		<strong>变音符号</strong> ，它们添加在字母上面，
		或以更改字母的发音或者以区分拼写相似词语。通常而言，这些 
		<strong>变音符号</strong> 在各自语言的键盘布局上就是死键。在输入 Unicode 
		中的组合字符时，需要首先按下死键表示用户正在输入组合字符，
		使用空格表示结束了组合字符的输入，而输入的字符最终会依据 Unicode 
		的规范化形式组合成字符串，其具体的码元可能会发生变化(见于 
		<a href="https://mangwu.github.io/uievents-key-cn/#precomposed-char-note">
		uievents-key-precomposed-character</a> )
		</div>

		<div class="example">
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| # | 事件类型          |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| 注释                 |
		 |   |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +---+-------------------+----------o-----------+-------------o---------------+------------o------------+----------------------+
		+| 1 | keydown           | KEY{Dead}            | <code>false</code>          |                         | 组合扬抑音符(死键)   |
		+| 2 | compositionstart  |                      |                             | <code>""</code>         |                      |
		+| 3 | compositionupdate |                      |                             | UNI{U+0302}             |                      |
		+| 4 | keyup             | KEY{Dead}            | <code>true</code>           |                         |                      |
		+| 5 | keydown           | KEY_NOLINK{ê}        | <code>true</code>           |                         |                      |
		+| 6 | compositionupdate |                      |                             | GLYPH{ê}                |                      |
		+| 7 | compositionend    |                      |                             | GLYPH{ê}                |                      |
		+| 8 | keyup             | KEY_NOLINK{e}        | <code>false</code>          |                         | 小写拉丁字母 E       |
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

		<p class="note">
		在第二个 EVENT{keydown} 事件(步骤5)中，键值(假设事件没有被阻止(suppressed))
		在正常情况下 <em>不</em> 会是 KEY_NOLINK{e}(小写拉丁字母 E 键)，
		因为传递给用户代理的值已经被死键操作修改了(modified)。
		</p>

		当用户在按下一个 <a href="#dead-key">死键</a> 后，
		再键入一个不受支持的基本字符(即一个没有活动变音标记的基本字符)时，
		此过程可能会中止: 

		<div class="example">
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| # | 事件类型          |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| 注释                 |
		 |   |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +---+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
		+| 1 | keydown           | KEY{Dead}            | <code>false</code>          |                         | 组合扬抑音符(死键)   |
		+| 2 | compositionstart  |                      |                             | <code>""</code>         |                      |
		+| 3 | compositionupdate |                      |                             | UNI{U+0302}             |                      |
		+| 4 | keyup             | KEY{Dead}            | <code>true</code>           |                         |                      |
		+| 5 | keydown           | KEY_NOLINK{q}        | <code>true</code>           |                         | 小写拉丁字母 Q       |
		+| 6 | compositionupdate |                      |                             | <code>""</code>         |                      |
		+| 7 | compositionend    |                      |                             | <code>""</code>         |                      |
		+| 8 | keyup             | KEY_NOLINK{q}        | <code>false</code>          |                         |                      |
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

	<h4 id="keys-IME">输入法编辑器</h4>

		本规范通过 {{CompositionEvent}} 接口和事件定义了 
		<a href="#ime">输入法编辑器</a> (IMEs)的模型。但是，
		组合事件和键盘事件不一定映射为一对一的关系。例如，接收 KEY{Accept} 键值的 
		EVENT{keydown} 并不一定意味着当前在 <a href="#ime">输入法</a> 
		中选择的文本正在被接受，而仅表示发生了击键并且与 <a href="#ime">输入法</a> 
		的接收功能(Accept functionality，在大多数输入法系统中，这通常会导致合成事件)
		断开了连接。键盘事件不能用于确定输入法编辑器的当前状态，可以通过 
		{{CompositionEvent}} 接口的 {{CompositionEvent/data}} 属性获取。此外，
		<a href="#ime">输入法</a> 系统和设备的功能各不相同，
		其中那些用于激活这些功能的按键，例如 KEYCAP{Convert} 和 KEYCAP{Accept} 键
		<span class="zh-upper">可以</span> 由其他可用键表示。
		键盘事件就是(correspond to)输入设备在键盘布局映射之后生成的事件。

		<p class="note">
		在某些实现或系统配置中，某些按键事件或其值可能会被使用中的 
		<a href="#ime">输入法</a> 阻止(suppressed)。
		</p>

		以下示例描述了使用日语输入法生成 Unicode 字符 GLYPH{&#x5E02;} (汉字，CJK 
		统一象形文字的一部分) 的可能的按键序列。
		此示例假设输入法编辑器已激活并处于日语罗马字(Japanese-Romaji)输入模式。
		根据使用的输入设备和 <a>IME</a> 的配置， KEYCAP{Convert} 和 KEYCAP{Accept} 
		键 <span class="zh-upper">可以</span> 被其他键取代，例如，
		它可以分别为 UNI{U+0020} (空格键)和 KEYCAP{Enter} 。

		<p class="note">
		GLYPH{&#x8A69;} (<q>poem</q>) 和 GLYPH{&#x5E02;} (<q>city</q>) 是同音词，
		发音都是 &#x3057; (<q>shi</q>/<q>si</q>)，因此用户需要使用 KEYCAP{Convert} 
		键来选择正确的选项。
		</p>

		<div class="example">
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| #  | 事件类型          |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| 注释                 |
		 |    |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +----+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
		+|  1 | keydown           | KEY_NOLINK{s}        | <code>false</code>          |                         | 小写拉丁字母 S       |
		+|  2 | compositionstart  |                      |                             | GLYPH{}                 |                      |
		+|  3 | beforeinput       |                      |                             |                         |                      |
		+|  4 | compositionupdate |                      |                             | GLYPH{s}                |                      |
		+|    |                   |                      |                             |                         | DOM 被更新了         |
		+|  5 | input             |                      |                             |                         |                      |
		+|  6 | keyup             | KEY_NOLINK{s}        | <code>true</code>           |                         |                      |
		+|  7 | keydown           | KEY_NOLINK{i}        | <code>true</code>           |                         | 小写拉丁字母 I       |
		+|  8 | beforeinput       |                      |                             |                         |                      |
		+|  9 | compositionupdate |                      |                             | GLYPH{&#x3057;}         | <em>shi</em>         |
		+|    |                   |                      |                             |                         | DOM 被更新了         |
		+| 10 | input             |                      |                             |                         |                      |
		+| 11 | keyup             | KEY_NOLINK{i}        | <code>true</code>           |                         |                      |
		+| 12 | keydown           | KEY{Convert}         | <code>true</code>           |                         | 转换键               |
		+| 13 | beforeinput       |                      |                             |                         |                      |
		+| 14 | compositionupdate |                      |                             | GLYPH{&#x8A69;}         | "poem"               |
		+|    |                   |                      |                             |                         | DOM 被更新了         |
		+| 15 | input             |                      |                             |                         |                      |
		+| 16 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 17 | keydown           | KEY{Convert}         | <code>true</code>           |                         | 转换键               |
		+| 18 | beforeinput       |                      |                             |                         |                      |
		+| 19 | compositionupdate |                      |                             | GLYPH{&#x5E02;}         | "city"               |
		+|    |                   |                      |                             |                         | DOM 被更新了         |
		+| 20 | input             |                      |                             |                         |                      |
		+| 21 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 22 | keydown           | KEY{Accept}          | <code>true</code>           |                         | 接收键               |
		+| 23 | compositionend    |                      |                             | GLYPH{&#x5E02;}         |                      |
		+| 24 | keyup             | KEY{Accept}          | <code>false</code>          |                         |                      |
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+

		<div class="note custom-note">
		CODE{Convert} 键的键帽标签为 KEYCAP{変換} ，它是 
		<a href="https://mangwu.github.io/uievents-code-cn/#keyboard-106">日式 "106"
		键盘布局</a> 上，位于空格按键右边的键，它用于把输入的假名转换成汉字。<br/>
		KEY{Accept} 键属于多媒体按键，接收当前选项结果或接收当前输入法序列的转换结果
		。但是大多数情况下，输入法都使用 CODE{Space} 键和 CODE{Enter} 
		键来接收选择当前合成转换结果。<br/>
		日语输入法存在罗马字(字母)，假名，汉字三种形式的转换，
		罗马字(字母)可以转换成平假名和片假名，平假名又可以转换成具体的汉字，
		所以需要借助额外的 CODE{Convert} 进行"変換"。<br/>
		但是中文输入就没有日语输入那么复杂了，现代拼音输入法只有拼音(字母)
		到汉字的转换过程，汉字输入的解决方案已经很成熟: 
		利用拼音去匹配字库和词语库中的常用汉字和词语，
		通过快捷键翻页查看下一批匹配的汉字和词语，
		再通过数字键或编辑键选择对应的汉字或词语，
		用户的选择结果会影响汉字被匹配的优先级。
		翻页查看下一批或上一批汉字的快捷键包括 KEYCAP{PgUp PgDn}，KEYCAP{&lt; &gt;}，
		KEYCAP{- +} 和 KEYCAP{[ ]} ，选择匹配的汉字的按键包括字母数字区域的数字键，
		和空格按键(默认第一项)。查看手写识别系统中的
		<a href="#figure-microsoft-pinyin-input-method-editor">拼音输入法编辑器</a> 
		非规范图示可以加深对 IME 的理解。下面是通过微软拼音输入法输入 "诗" 
		("詩"的简体汉字)的事件触发图示:

		<figure id="figure-ime-poem">
			<img
				src="images/ime-poem.gif"
				width="900"
				alt='使用微软拼音输入法输入 "诗" 时派发的事件序列'
			/>
			<div class="custom-figcaption">
			使用微软拼音输入法输入 "诗" 时派发的事件序列
			</div>
		</figure>
		
		</div>
		</div>

		IME 合成也可以像下面的例子一样被取消，输入条件与前面的例子完全相同。
		根据所使用的输入设备和输入法的配置，键 KEYCAP{Cancel} 也可能被其他键取代，
		例如，它可以是 UNI{U+001B} (退出键，CODE{Escape} )。

		<div class="example">
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| #  | 事件类型          |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| 注释                 |
		 |    |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +----+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
		+|  1 | keydown           | KEY_NOLINK{s}        | <code>false</code>          |                         | 小写拉丁字母 S       |
		+|  2 | compositionstart  |                      |                             | GLYPH{}                 |                      |
		+|  3 | compositionupdate |                      |                             | GLYPH{s}                |                      |
		+|  4 | keyup             | KEY_NOLINK{s}        | <code>true</code>           |                         |                      |
		+|  5 | keydown           | KEY_NOLINK{i}        | <code>true</code>           |                         | 小写拉丁字母 I       |
		+|  6 | compositionupdate |                      |                             | GLYPH{&#x3057;}         | <em>shi</em>         |
		+|  7 | keyup             | KEY_NOLINK{i}        | <code>true</code>           |                         |                      |
		+|  8 | keydown           | KEY{Convert}         | <code>true</code>           |                         | 转换键               |
		+|  9 | compositionupdate |                      |                             | GLYPH{&#x8A69;}         | "poem"               |
		+| 10 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 11 | keydown           | KEY{Convert}         | <code>true</code>           |                         | 转换键               |
		+| 12 | compositionupdate |                      |                             | GLYPH{&#x5E02;}         | "city"               |
		+| 13 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 14 | keydown           | KEY{Cancel}          | <code>true</code>           |                         | 取消键               |
		+| 15 | compositionupdate |                      |                             | GLYPH{}                 |                      |
		+| 16 | compositionend    |                      |                             | GLYPH{}                 |                      |
		+| 17 | keyup             | KEY{Cancel}          | <code>false</code>          |                         |                      |
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

		<p class="note">
		一些 <a href="#ime">输入法编辑器</a> (例如在 MacOS 操作系统上) 
		可能会在取消合成之前为合成事件的 {{CompositionEvent/data}} 属性设置一个 
		<a href="#empty-string">空字符串</a> 。
		</p>

		<h5 id="keys-IME-keys">输入法编辑器模式按键</h5>

			一些设备上的某些键用于激活 <a href="#ime">输入法编辑器</a> 功能，
			或更改活动状态 <a href="#ime">输入法编辑器</a> 的模式。
			可以为不同的设备或语言模式自定义用于上述功能的按键。
			本规范中为此定义的键为: KEY{Alphanumeric} ， KEY{CodeInput} ，  
			KEY{FinalMode} ，  KEY{HangulMode} ，  KEY{HanjaMode} ， 
			KEY{Hiragana} ，  KEY{JunjaMode} ，  KEY{KanaMode} ，  KEY{KanjiMode} ， 
			KEY{Katakana} 和 KEY{RomanCharacters} 。当按下这些键中的一个，
			并且当前没有任何 <a>IME</a> 处于活动状态时，
			期望在该键的指示下激活对应的 <a>IME</a> (如果可用)模式。
			如果击键时某个 <a>IME</a> 已经处于活动状态，则活动状态的 <a>IME</a> 
			可能会更改为(按键)对应的模式，或者可能会启动不同的 <a>IME</a> ，或者也 
			<span class="zh-upper">可以</span> 被忽略，取决于设备和具体应用程序
			(application-specific)。

			本规范还定义了其他键，这些键专门用于 <a href="#ime">输入法编辑器</a> 
			的操作: KEY{Accept} ，  KEY{AllCandidates} ，  KEY{Cancel} ，  
			KEY{Convert} ， KEY{Compose} ，  KEY{FullWidth} ，  KEY{HalfWidth} ，  
			KEY{NextCandidate} ， KEY{Nonconvert} 和 KEY{PreviousCandidate} 。
			这些键的功能在本规范中没有定义 —— 有关 <a href="#ime">输入法编辑器</a> 
			功能的详细信息，请参阅其他资源。

			<p class="note">
			具有 <a href="#ime">输入法编辑器</a> 功能的键不限于此目的(激活输入法功能，
			更输入法模式)，还可以具有其他特定于设备或实现的目的。
			</p>

			<div class="note custom-note">
			上面列出的一些与输入法有关的按键通常和使用的键盘设备有关系，可以查阅 
			[[UIEvents-Key]] 和 [[UIEvents-Code]] 获取更多信息。
 			</div>

	<h4 id="keys-cancelable-keys">默认行为和可取消的键盘事件</h4>

		取消 EVENT{keydown} 事件的 <a href="#default-action">默认行为</a> 
		<span class="zh-upper">不得</span> 影响其相应的 EVENT{keyup} 事件，但  
		<span class="zh-upper">必须</span> 防止生成相应的 EVENT{beforeinput} 和
		EVENT{input} (以及 EVENT{keypress} ，如果支持的话)事件。
		以下示例描述了在使用美式映射的美式键盘上生成 Unicode 字符 Q (大写拉丁字母Q)
		的可能按键序列:

		<div class="example">
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		=| # | 事件类型    |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | 修饰符                     | 注释                              |
		 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                            |                                   |
		 +---+-------------+----------o-----------+---------o----------+--------------o-------------+-----------------------------------+
		+| 1 | keydown     | KEY{Shift}           |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 2 | keydown     | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} | <a href="#default-action">默认行为|
		 |   |             |                      |                    |                            | </a>被阻止，即通过调用            |
		 |   |             |                      |                    |                            | {{Event/preventDefault()}} 。     |
		+|   |             |                      |                    |                            | <em>没有 EVENT{beforeinput} 或    |
		 |   |             |                      |                    |                            | EVENT{input} (或 EVENT{keypress}  |
		 |   |             |                      |                    |                            | ，如果支持的话) 事件被生成</em>   |
		+| 3 | keyup       | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 4 | keyup       | KEY{Shift}           |                    |                            |                                   |
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		</div>

		如果(被阻止的)按键是修饰符键，则在击键时仍 
		<span class="zh-upper">必须</span> 考虑修饰符按键的状态。
		以下示例描述了在使用美式映射的美式键盘上生成 Unicode 字符 Q 
		(大写拉丁字母 Q )的可能键序列: 

		<div class="example">
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		=| # | 事件类型    |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | 修饰符                     | 注释                              |
		 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                            |                                   |
		 +---+-------------+----------o-----------+---------o----------+--------------o-------------+-----------------------------------+
		+| 1 | keydown     | KEY{Shift}           |                    | {{KeyboardEvent/shiftKey}} | <a href="#default-action">默认行为|
		 |   |             |                      |                    |                            | </a>被阻止，即通过调用            |
		 |   |             |                      |                    |                            | {{Event/preventDefault()}} 。     |
		+| 2 | keydown     | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 3 | beforeinput |                      | GLYPH{Q}           |                            |                                   |
		+| 4 | input       |                      |                    |                            |                                   |
		+| 5 | keyup       | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 6 | keyup       | KEY{Shift}           |                    |                            |                                   |
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		<div class="note custom-note">
		这个例子的结论是，被阻止的 KEY{Shift} 不会阻止 EVENT{beforeinput} 和 
		EVENT{input} 事件的触发，并且修饰符的状态对其它字符按键仍然有影响
		</div>
		
		</div>

		If the key is part of a sequence of several keystrokes, whether it is a
		<a>dead key</a> or it is contributing to an Input Method Editor
		sequence, the keystroke MUST be ignored (not taken into account) only if
		the <a>default action</a> is canceled on the EVENT{keydown} event.
		Canceling a <a>dead key</a> on a EVENT{keyup} event has no effect on
		EVENT{beforeinput} or EVENT{input} events. The following example uses
		the dead key KEY{Dead} (UNI{U+0302} Combining Circumflex Accent key) and
		KEY_NOLINK{e} (UNI{U+0065}, Latin Small Letter E key) on a French
		keyboard using a French mapping and without any modifier activated:

		<div class="example">
		++---+-------------+----------------------+--------------------+-----------------------------------+
		=| # | 事件类型    |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | 注释                              |
		 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                                   |
		 +---+-------------+----------o-----------+---------o----------+-----------------------------------+
		+| 1 | keydown     | KEY{Dead}            |                    | <a href="#default-action">默认行为|
		 |   |             |                      |                    | </a>被阻止，即通过调用            |
		 |   |             |                      |                    | {{Event/preventDefault()}} 。     |
		+| 2 | keyup       | KEY{Dead}            |                    |                                   |
		+| 3 | keydown     | KEY_NOLINK{e}        |                    |                                   |
		+| 4 | beforeinput |                      | GLYPH{e}           |                                   |
		+| 5 | input       |                      |                    |                                   |
		+| 6 | keyup       | KEY_NOLINK{e}        |                    |                                   |
		++---+-------------+----------------------+--------------------+-----------------------------------+
		</div>

</section>
