<section>
<h2 id="keys">键盘事件和键值</h2>


本节包含有关键盘事件的必要信息：

*	键盘布局、映射和键值的说明。
*	键之间的关系，例如<a href="#dead-key">死键</a> 或 修饰符键。
*	键盘事件和其默认行为之间的关系。
*	一组 <code>键</code> 值集合，以及如何扩展这集合的指导方针。

<p class="note">
本节使用塞尔维亚语拉丁字母和汉字(Kanji)字符，这些字符可能在本规范的 PDF 
版本或打印版本中被误传或不可用。
</p>

<h3 id="keyboard-input">键盘输入</h3>

	<em>本节内容不是规范的</em>

	每个键与整个键盘的关系有三个独立的方面，
	每个方面在不同型号和配置的键盘中都有所不同，尤其是地区不同时，键盘差异更大: 

	*	<strong>机械布局(Mechanical layout):</strong> 键盘上物理按键的尺寸、
		大小和位置
	*	<strong>视觉标记(Visual markings):</strong> 标记每个按键的标签(或 
		<em>图例(legends)</em> )
	*	<strong>功能映射:</strong> 每个键的抽象键值关联。

	本规范仅根据 <a href="#keys-keyvalues"><code>key</code></a> 值和 
	<a href="#keys-codevalues"><code>code</code></a> 值定义了功能映射，
	但简要描述了背景的 <a href="#key-legends">按键图例(key legends)</a> 。

	<h4 id="key-legends">按键图例</h4>

		<em>本节用于提供有用信息</em>

		按键图例是印在或浮雕在 <em><a href="#key-cap-note">键帽</a></em> 
		(覆盖在键盘机械开关上的矩形"帽")上的视觉标记。
		这些标记通常由一次击键时将产生的一个或多个字符组成(如 GLYPH{G} 、 GLYPH{8} 
		或 GLYPH{ш} )，或指示该键功能的名称或符号(如向上的箭头 GLYPH{&#x21E7;} 
		表示 KEYCAP{Shift} 按键，或字符串 <code>"Enter"</code> 表示 KEYCAP{Enter} 
		按键)。按键通常由该标记表示(例如， <q>按下 <code>"Shift"</code> 和 
		<code>"G"</code> 键。</q> )。但是，请注意，按键的视觉外观与其数字化表示无关，
		在许多配置中可能完全不准确。甚至控制键和功能键(如 KEYCAP{Enter} )
		也可以映射到不同的功能，甚至可以映射为字符键。

		<p class="note">
		许多键盘通常包含不产生任何字符的键，即使该按键上的符号(按键图例)可能具有 
		Unicode 等效符号。例如， KEYCAP{Shift} 键(键帽上)可能带有符号
		GLYPH{&#x21E7;} ，其 Unicode 码点为 UNI{U+21E7} ，但按下 KEYCAP{Shift} 
		键不会产生此字符值，并且 KEYCAP{Shift} 没有 Unicode 码点。
		</p>

<h3 id="keys-codevalues">键码</h3>

	键码 ( {{KeyboardEvent/code}} )是键盘事件的属性，
	可用于识别与键盘事件相关联的物理键。它与 USB 使用 IDs 的相似之处在于，
	它提供了一个与供应商无关(vendor-neutral)的底层值(类似于扫描码[scancode])。

	{{KeyboardEvent/code}} 属性的主要目的是提供一种一致和连贯的方法 ——
	根据按键的物理位置来识别按键。此外，它还提供了一个稳定的名称
	(不受当前键盘状态的影响)，用于唯一标识键盘上的每个键。

	有效的 {{KeyboardEvent/code}} 值的列表在 [[!UIEvents-Code]] 中定义。

	<h4 id="code-motivation">定义 {{KeyboardEvent/code}} 属性的动机</h4>

		标准 PC 键盘有一组键(我们称之为<em> [=书写系统键=] </em>)，
		这些键根据用户选择的当前键盘布局生成不同的 {{KeyboardEvent/key}} 值。
		这种情况使得编写根据键的物理位置来检测标识键的代码变得困难，
		因为代码需要知道哪个键盘布局在生效，才能知道哪些 {{KeyboardEvent/key}} 
		值要检查。现实世界中的一个例子是一款想要使用 GLYPH{W} 、 GLYPH{A} 、 
		GLYPH{S} 和 GLYPH{D} 键来控制玩家移动的游戏。 {{KeyboardEvent/code}} 
		属性通过提供一个 <em>不受当前键盘布局影响的</em> 固定值来检查，
		从而解决了这个问题。

		此外， {{KeyboardEvent/key}} 属性中的值也取决于当前键盘状态。因此，
		被按下和释放的键相对于修饰键的顺序可能会影响存储在 {{KeyboardEvent/key}} 
		属性中的值。 {{KeyboardEvent/code}} 属性通过提供一个 
		<em>不受当前键盘布局影响的</em> 固定值来检查，从而解决了这个问题。

	<h4 id="relationship-between-key-code">{{KeyboardEvent/key}} 和 
	{{KeyboardEvent/code}} 之间的关系</h4>

		<dl>
			<dt>{{KeyboardEvent/key}}</dt>
			<dd> {{KeyboardEvent/key}} 属性是为那些对按下的键的含义感兴趣的用户设计的，
				需要考虑到当前的键盘布局(和IME; 死键被赋予一个唯一的 
				{{KeyboardEvent/key}} 值)。使用例子: 检测修饰键或的基本的修饰键(例如，
				响应键盘快捷键以执行操作)。
			</dd>

			<dt>{{KeyboardEvent/code}}</dt>
			<dd> {{KeyboardEvent/code}} 属性适用于对用户按下的键感兴趣的用户，
				而不考虑任何布局修饰。使用例子: 检测 WASD 键(例如，用于游戏中的移动控制)
				或捕获所有键(例如，在远程桌面客户端中，将所有键发送到远程主机)。
			</dd>
		</dl>

	<h4 id="code-examples"><code>code</code> 例子</h4>

		<div class="note custom-note">
		以下关于键盘布局的类型，可以查阅 [=标准键盘布局=] 。<br/> 美式键盘布局: 
		标准 "101" 键盘布局; <br/> 日式键盘布局: 日式 "106" 键盘布局; <br/> 
		美式国际键盘布局:  备用 "101" 键盘布局; <br/> 英式键盘布局: 
		标准 "102" 键盘布局。
		</div>
		
		<div class="example">
			处理左右的Alt键

			++----------+----------------------+----------------------+------------------------------------------+
			=| 键盘布局 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释                                     |
			 |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                          |
			 +----------+----------o-----------+----------o-----------+------------------------------------------+
			+| 美式     | KEY{Alt}             | CODE{AltLeft}        | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}}  |
			+| 法语     | KEY{Alt}             | CODE{AltLeft}        | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}}  |
			+| 美式     | KEY{Alt}             | CODE{AltRight}       | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} |
			+| 法语     | KEY{AltGr}           | CODE{AltRight}       | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} |
			++----------+----------------------+----------------------+------------------------------------------+

			在本例中，检查 {{KeyboardEvent/key}} 属性允许匹配 KEYCAP{Alt} ，
			而不必担心按下了哪个 Alt 键 ( CODE{AltLeft} 或 CODE{AltRight} )。
			检查 {{KeyboardEvent/code}} 属性可以匹配右 Alt 键( CODE{AltRight} )，
			而无需担心当前正在使用的键盘布局。

			请注意，在法语示例中， KEYCAP{Alt} 和 KEYCAP{AltGr} 键保留其左右位置( 
			{{KeyboardEvent/code}} 值仍然是 CODE{AltLeft} 和 CODE{AltRight} )，
			即使每个键只有一个。
		</div>  <!-- Handling Left and Right Alt Keys -->

		<div class="example">
			处理单引号按键

			++----------+----------------------+----------------------+--------+
			=| 键盘布局 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释   |
			 |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|        |
			 +----------+----------o-----------+-----------o----------+--------+
			+| 美式     | KEY_NOLINK{'}        | CODE{Quote}          |        |
			+| 日式     | KEY_NOLINK{:}        | CODE{Quote}          |        |
			+| 美式国际 | KEY{Dead}            | CODE{Quote}          |        |
			++----------+----------------------+----------------------+--------+

			此示例显示了死键值是如何在属性中被编码的。 {{KeyboardEvent/key}} 
			值根据当前区域设置而变化，而 {{KeyboardEvent/code}} 属性则返回一致的值。
		</div><!-- Handling the Single Quote Key -->

		<div class="example" id="example-key-2">
			在各种键盘布局上处理 GLYPH{2} 键(按下 Shift 键和不按下 Shift 键)。

			++----------+----------------------+----------------------+----------------------------+
			=| Keyboard |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes                      |
			 |  Layout  |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                            |
			 +----------+----------o-----------+----------o-----------+----------------------------+
			+| 美式     | KEY_NOLINK{2}        | CODE{Digit2}         |                            |
			+| 美式     | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
			+| 英式     | KEY_NOLINK{2}        | CODE{Digit2}         |                            |
			+| 英式     | KEY_NOLINK{"}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
			+| 法语     | KEY_NOLINK{é}        | CODE{Digit2}         |                            |
			+| 法语     | KEY_NOLINK{2}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
			++----------+----------------------+----------------------+----------------------------+

			无论当前区域设置或修改键状态如何，在 US 键盘上键帽标签为 GLYPH{2} 
			的键总是会在 {{KeyboardEvent/code}} 属性中产生 CODE{Digit2} 。

		</div><!-- Handling the 2 Key -->

		<div class="example" id="example-key-shift-2">
			键盘事件序列:  KEYCAP{Shift} 和 KEYCAP{2}


			比较下面列出的两个(顺序不同)按键事件序列的属性值。它们都在美国键盘上产生 
			GLYPH{@} 字符，但按键释放的顺序不同。在第一个序列中，顺序为: 
			KEYCAP{Shift} (按下)， KEYCAP{2} (按下)、 KEYCAP{2} (释放)、 
			KEYCAP{Shift} (释放)。

			++---+----------+----------------------+----------------------+-----------------------------------------+
			=| # | 事件类型 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| 注释                                    |
			 |   |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                         |
			 +---+----------+----------o-----------+----------o-----------+-----------------------------------------+
			+| 1 | keydown  | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			+| 2 | keydown  | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
			+| 3 | keypress | KEY_NOLINK{@}        | CODE{}               | (如果支持)                              |
			+| 4 | keyup    | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
			+| 5 | keyup    | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			++---+----------+----------------------+----------------------+-----------------------------------------+

			在第二个序列中， KEYCAP{Shift} 在 KEYCAP{2} 之前释放，
			从而产生以下事件顺序：KEYCAP{Shift} (按下)， KEYCAP{2} (按下)、 
			KEYCAP{Shift} (释放)、 KEYCAP{2} (释放)。

			++---+----------+----------------------+----------------------+-----------------------------------------+
			=| # | 事件类型 |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes                                   |
			 |   |          |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                         |
			 +---+----------+----------o-----------+----------o-----------+-----------------------------------------+
			+| 1 | keydown  | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			+| 2 | keydown  | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
			+| 3 | keypress | KEY_NOLINK{@}        | CODE{}               | (如果支持)                              |
			+| 4 | keyup    | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
			+| 5 | keyup    | KEY_NOLINK{2}        | CODE{Digit2}         |                                         |
			++---+----------+----------------------+----------------------+-----------------------------------------+

			请注意，在 GLYPH{2} 键的 EVENT{keydown} 和 EVENT{keyup} 事件之间的 
			{{KeyboardEvent/key}} 属性值不匹配。 {{KeyboardEvent/code}} 
			属性提供了一个不受当前修饰键状态影响的一致值。

		</div><!-- Sequence of Keyboard Events: Shift and 2 -->

	<h4 id="code-virtual-keyboards">{{KeyboardEvent/code}} 和虚拟键盘</h4>

		{{KeyboardEvent/code}} 属性的有用性对于虚拟键盘(以及遥控器和和弦键盘)
		来说不太明显。通常，如果虚拟(或遥控器)键盘模仿标准键盘的布局和功能，
		则它还 <span class="zh-upper">必须</span> 适当地设置 {{KeyboardEvent/code}} 
		属性。对于不模仿标准键盘布局的键盘，则 {{KeyboardEvent/code}} 
		属性 <span class="zh-upper">可以</span> 设置为标准键盘上最接近的匹配项，也
		<span class="zh-upper">可以</span> 未定义。

		对于具有变化值特性的按键的虚拟键盘(这些按键根据某些修饰键状态产生不同的值)，
		{{KeyboardEvent/code}} 值应该是在设备处于出厂重置状态时按下按键(button)
		时产生的 {{KeyboardEvent/key}} 值。

<h3 id="keys-keyvalues">键盘事件 <code>key</code> 属性值</h3>

	键值是一个 <code>DOMString</code> ，它可以用来表示(indicate)
	键盘上的任何给定键，无论其位置或状态如何，通过它产生的值(来表示按键)。这些键值 
	<span class="zh-upper">可以</span> 用作实现生成的键盘事件的返回值，
	或者用作内容作者指定期望得到的输入(例如键盘快捷键)的输入值。

	有效 <code>key</code> 值的列表在 [[!UIEvents-Key]] 中定义。

	通过使用 {{KeyboardEvent/key}} 属性，键值被用于检测已按下的键的值。
	内容作者可以检索大写或小写字母、数字、符号或其他产生字符的键的 
	<a href="#character-value">字符值</a> ，也可以检索控制键、修饰符键、
	功能键或其他不产生字符的按键的 <a href="#key-value">键值</a> 。
	这些值可以用于: 监控特定的输入字符串; 用于检测和作用于结合了其他输入(例如鼠标)
	的修饰键输入; 用于创建虚拟键盘; 或用于任何数量的其他目的。

	键值也可以由内容作者在字符串比较中使用，作为符合宿主语言的标记属性
	(如HTML访问键)的值，或用于其他相关目的。一致的宿主语言应该允许内容作者使用两个等价字符串值中的任意一个作为键值：字符值或键值。
	Key values can also be used by content authors in string comparisons, as
	values for markup attributes (such as the HTML <code>accesskey</code>) in
	conforming <a>host languages</a>, or for other related purposes.   A
	conforming <a>host language</a> SHOULD allow content authors to use either
	of the two equivalent string values for a key value: the <a>character
	value</a>, or the <a>key value</a>.

	<p class="note">
	While implementations will use the most relevant value for a key
	independently of the platform or keyboard layout mappings, content authors
	can not make assumptions on the ability of keyboard devices to generate
	them.  When using keyboard events and key values for shortcut-key
	combinations, content authors can <q>consider using numbers and function
	keys (KEYCAP{F4}, KEYCAP{F5}, and so on) instead of letters</q> ([[DWW95]])
	given that most keyboard layouts will provide keys for those.
	</p>

	A key value does not indicate a specific key on the physical keyboard, nor
	does it reflect the character printed on the key. A key value indicates the
	current value of the event with consideration to the current state of all
	active keys and key input modes (including shift modes), as reflected in the
	operating-system mapping of the keyboard and reported to the implementation.
	In other words, the key value for the key labeled KEYCAP{O} on a
	<a>QWERTY</a> keyboard has the key value KEY_NOLINK{o} in an unshifted state and
	KEY_NOLINK{O} in a shifted state. Because a user can map their keyboard to an
	arbitrary custom configuration, the content author is encouraged not to
	assume that a relationship exists between the shifted and unshifted states
	of a key and the majuscule form (uppercase or capital letters) and minuscule
	form (lowercase or small letters) of a character representation, but is
	encouraged instead to use the value of the {{KeyboardEvent/key}} attribute.
	For example, the Standard "102" Keyboard layout depicted in [[UIEvents-Code]]
	illustrates one possible set of <a>key mappings</a> on one possible keyboard
	layout. Many others exist, both standard and idiosyncratic.

	<p class="note">
	To simplify <a>dead key</a> support, when the operating-system mapping of
	the keyboard is handling a <a>dead key</a> state, the current state of the
	dead key sequence is not reported via the {{KeyboardEvent/key}} attribute.
	Rather, a key value of KEY{Dead} is reported. Instead, implementations
	generate <a href="#events-compositionevents">composition events</a> which
	contain the intermediate state of the dead key sequence reported via the
	{{CompositionEvent/data}} attribute. As in the previous example, the key
	value for the key marked KEYCAP{O} on a <a>QWERTY</a> keyboard has a
	{{CompositionEvent/data}} value of <code class="char">"&#xF6;"</code> in an
	unshifted state during a dead-key operation to add an umlaut diacritic, and
	<code class="char">"&#xD6;"</code> in a shifted state during a dead-key
	operation to add an umlaut diacritic.
	</p>

	It is also important to note that there is not a one-to-one relationship
	between key event states and key values.  A particular key value might be
	associated with multiple keys. For example, many standard keyboards contain
	more than one key with the KEYCAP{Shift} key value (normally distinguished
	by the {{KeyboardEvent/location}} values
	{{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} and
	{{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}}) or KEYCAP{8} key value (normally
	distinguished by the {{KeyboardEvent/location}} values
	{{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}} and
	{{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}}), and user-configured custom
	keyboard layouts MAY duplicate any key value in multiple key-state scenarios
	(note that {{KeyboardEvent/location}} is intended for standard keyboard
	layouts, and cannot always indicate a meaningful distinction).

	Finally, the meaning of any given character representation is
	context-dependent and complex.  For example, in some contexts, the asterisk
	(star) glyph (GLYPH{*}) represents a footnote or
	emphasis (when bracketing a passage of text). However, in some documents or
	executable programs it is equivalent to the mathematical multiplication
	operation, while in other documents or executable programs, that function is
	reserved for the multiplication symbol (GLYPH{&#xD7;}, Unicode value
	UNI{U+00D7}) or the Latin small letter <code>"x"</code>
	(due to the lack of a multiplication key on many keyboards and the
	superficial resemblance of the glyphs GLYPH{&#xD7;} and GLYPH{x}).  Thus,
	the semantic meaning or function of character representations is outside the
	scope of this specification.

	<h4 id="keys-modifiers">Modifier keys</h4>

		Keyboard input uses modifier keys to change the normal behavior of a
		key. Like other keys, modifier keys generate EVENT{keydown} and
		EVENT{keyup} events, as shown in the example below. Some modifiers are
		activated while the key is being pressed down or maintained pressed such
		as KEYCAP{Alt}, KEYCAP{Control}, KEYCAP{Shift}, KEYCAP{AltGraph}, or
		KEYCAP{Meta}. Other modifiers are activated depending on their state
		such as KEYCAP{CapsLock}, KEYCAP{NumLock}, or KEYCAP{ScrollLock}. Change
		in the state happens when the modifier key is being pressed down. The
		{{KeyboardEvent}} interface provides convenient attributes for some
		common modifiers keys: {{KeyboardEvent/ctrlKey}},
		{{KeyboardEvent/shiftKey}}, {{KeyboardEvent/altKey}},
		{{KeyboardEvent/metaKey}}. Some operating systems simulate the
		KEYCAP{AltGraph} modifier key with the combination of the KEYCAP{Alt}
		and KEYCAP{Control} modifier keys. Implementations are encouraged to use
		the KEYCAP{AltGraph} modifier key.

		<div class="example">
			This example describes a possible sequence of events
			associated with the generation of the Unicode character Q (Latin
			Capital Letter Q, Unicode code point UNI{U+0051}) on a US
			keyboard using a US mapping:

			++---+-------------+----------------------+----------------------------+------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                  |
			 |   |             |{{KeyboardEvent/key}} |                            |                        |
			 +---+-------------+----------o-----------+-------------o--------------+------------------------+
			+| 1 | keydown     | KEY{Shift}           | {{KeyboardEvent/shiftKey}} |                        |
			+| 2 | keydown     | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} | Latin Capital Letter Q |
			+| 3 | beforeinput |                      |                            |                        |
			+| 4 | input       |                      |                            |                        |
			+| 5 | keyup       | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} |                        |
			+| 6 | keyup       | KEY{Shift}           |                            |                        |
			++---+-------------+----------------------+----------------------------+------------------------+
		</div>

		<div class="example">
			Th example describes an alternate sequence of keys to the
			example above, where the KEYCAP{Shift} key is released before the
			KEYCAP{Q} key.  The key value for the KEYCAP{Q} key will revert to its
			unshifted value for the EVENT{keyup} event:

			++---+-------------+----------------------+----------------------------+------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                  |
			 |   |             |{{KeyboardEvent/key}} |                            |                        |
			 +---+-------------+----------o-----------+-------------o--------------+------------------------+
			+| 1 | keydown     | KEY{Shift}           | {{KeyboardEvent/shiftKey}} |                        |
			+| 2 | keydown     | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} | Latin Capital Letter Q |
			+| 3 | beforeinput |                      |                            |                        |
			+| 4 | input       |                      |                            |                        |
			+| 5 | keyup       | KEY{Shift}           |                            |                        |
			+| 6 | keyup       | KEY_NOLINK{q}        |                            | Latin Small Letter Q   |
			++---+-------------+----------------------+----------------------------+------------------------+
		</div>

		<div class="example">
			The following example describes a possible sequence of keys that
			does not generate a Unicode character (using the same configuration
			as the previous example):

			++---+-------------+----------------------+----------------------------+----------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                      |
			 |   |             |{{KeyboardEvent/key}} |                            |                            |
			 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
			+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 2 | keydown     | KEY_NOLINK{v}        | {{KeyboardEvent/ctrlKey}}  | Latin Small Letter V       |
			+|   |             |                      |                            | <em>No EVENT{beforeinput}  |
			 |   |             |                      |                            | or EVENT{input} events are |
			 |   |             |                      |                            | generated.</em>            |
			+| 3 | keyup       | KEY_NOLINK{v}        | {{KeyboardEvent/ctrlKey}}  | Latin Small Letter V       |
			+| 4 | keyup       | KEY{Control}         |                            |                            |
			++---+-------------+----------------------+----------------------------+----------------------------+
		</div>

		<div class="example">
			The following example shows the sequence of events when both KEYCAP{Shift} and
			KEYCAP{Control} are pressed:

			++---+-------------+----------------------+----------------------------+----------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                      |
			 |   |             |{{KeyboardEvent/key}} |                            |                            |
			 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
			+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 2 | keydown     | KEY{Shift}           | {{KeyboardEvent/ctrlKey}}, |                            |
			 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
			+| 3 | keydown     | KEY_NOLINK{V}        | {{KeyboardEvent/ctrlKey}}, | Latin Capital Letter V     |
			 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
			+|   |             |                      |                            | <em>No EVENT{beforeinput}  |
			 |   |             |                      |                            | or EVENT{input} events are |
			 |   |             |                      |                            | generated.</em>            |
			+| 4 | keyup       | KEY_NOLINK{V}        | {{KeyboardEvent/ctrlKey}}, | Latin Capital Letter V     |
			 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
			+| 5 | keyup       | KEY{Shift}           | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 6 | keyup       | KEY{Control}         |                            |                            |
			++---+-------------+----------------------+----------------------------+----------------------------+
		</div>

		<div class="example">
			For non-US keyboard layouts, the sequence of events is the same, but
			the value of the key is based on the current keyboard layout. This
			example shows a sequence of events when an Arabic keyboard layout is
			used:

			++---+-------------+----------------------+----------------------------+----------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                      |
			 |   |             |{{KeyboardEvent/key}} |                            |                            |
			 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
			+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
			+| 2 | keydown     | KEY_NOLINK{ر}        | {{KeyboardEvent/ctrlKey}}  | Arabic Letter Reh          |
			+|   |             |                      |                            | <em>No EVENT{beforeinput}  |
			 |   |             |                      |                            | or EVENT{input} events are |
			 |   |             |                      |                            | generated.</em>            |
			+| 3 | keyup       | KEY_NOLINK{ر}        | {{KeyboardEvent/ctrlKey}}  | Arabic Letter Reh          |
			+| 4 | keyup       | KEY{Control}         |                            |                            |
			++---+-------------+----------------------+----------------------------+----------------------------+
		</div>

		<p class="note">
		The value in the EVENT{keydown} and EVENT{keyup} events varies based on
		the current keyboard layout in effect when the key is pressed. This
		means that the KEYCAP{v} key on a US layout and the KEYCAP{ر} key on an
		Arabic layout will generate different events even though they are the
		same physical key. To identify these events as coming from the same
		physical key, you will need to make use of the {{KeyboardEvent/code}}
		attribute.
		</p>

		In some cases, <a>modifier keys</a> change the {{KeyboardEvent/key}}
		value for a key event. For example, on some MacOS keyboards, the  key
		labeled "delete" functions the same as the KEYCAP{Backspace} key on the
		Windows OS when unmodified, but when modified by the KEYCAP{Fn} key,
		acts as the KEYCAP{Delete} key, and the value of {{KeyboardEvent/key}}
		will match the most appropriate function of the key in its current
		modified state.

	<h4 id="keys-dead">Dead keys</h4>

		Some keyboard input uses <a>dead keys</a> for the input of composed
		character sequences. Unlike the handwriting sequence, in which users
		enter the base character first, keyboard input requires to enter a
		special state when a <a>dead key</a> is pressed and emit the
		character(s) only when one of a limited number of <q>legal</q> base
		character is entered.

		<p class="note">
		The MacOS and Linux operating systems use input methods to process
		<a>dead keys</a>.
		</p>

		The <a>dead keys</a> (across all keyboard layouts and mappings) are
		represented by the key value KEYCAP{Dead}. In response to any dead key
		press, <a href="#events-compositionevents"> composition events</a> must
		be dispatched by the user agent and the EVENT{compositionupdate} event's
		{{CompositionEvent/data}} value must be the character value of the
		current state of the dead key combining sequence.

		While Unicode combining characters always follow the handwriting
		sequence, with the combining character trailing the corresponding
		letter, typical dead key input MAY reverse the sequence, with the
		combining character before the corresponding letter. For example, the
		word <em>naïve</em>, using the combining diacritic <em>¨</em>, would be
		represented sequentially in Unicode as <em>nai¨ve</em>, but MAY be typed
		<em>na¨ive</em>. The sequence of keystrokes UNI{U+0302} (Combining
		Circumflex Accent key) and UNI{U+0065} (key marked with the Latin Small
		Letter E) will likely produce (on a French keyboard using a french
		mapping and without any modifier activated) the Unicode character
		GLYPH{&#xEA;} (Latin Small Letter E With Circumflex), as preferred by
		the Unicode Normalization Form <em>NFC</em>.

		<div class="example">
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| # | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
		 |   |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +---+-------------------+----------o-----------+-------------o---------------+------------o------------+----------------------+
		+| 1 | keydown           | KEY{Dead}            | <code>false</code>          |                         | Combining Circumflex |
		 |   |                   |                      |                             |                         | Accent (Dead Key)    |
		+| 2 | compositionstart  |                      |                             | <code>""</code>         |                      |
		+| 3 | compositionupdate |                      |                             | UNI{U+0302}             |                      |
		+| 4 | keyup             | KEY{Dead}            | <code>true</code>           |                         |                      |
		+| 5 | keydown           | KEY_NOLINK{ê}        | <code>true</code>           |                         |                      |
		+| 6 | compositionupdate |                      |                             | GLYPH{ê}                |                      |
		+| 7 | compositionend    |                      |                             | GLYPH{ê}                |                      |
		+| 8 | keyup             | KEY_NOLINK{e}        | <code>false</code>          |                         | Latin Small Letter E |
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

		<p class="note">
		In the second EVENT{keydown} event (step 5), the key value (assuming the
		event is not suppressed) will <em>not</em> be KEY_NOLINK{e} (Latin Small
		Letter E key) under normal circumstances because the value delivered to
		the user agent will already be modified by the dead key operation.
		</p>

		This process might be aborted when a user types an unsupported base
		character (that is, a base character for which the active
		diacritical mark is not available) after pressing a <a>dead key</a>:

		<div class="example">
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| # | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
		 |   |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +---+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
		+| 1 | keydown           | KEY{Dead}            | <code>false</code>          |                         | Combining Circumflex |
		 |   |                   |                      |                             |                         | Accent (Dead Key)    |
		+| 2 | compositionstart  |                      |                             | <code>""</code>         |                      |
		+| 3 | compositionupdate |                      |                             | UNI{U+0302}             |                      |
		+| 4 | keyup             | KEY{Dead}            | <code>true</code>           |                         |                      |
		+| 5 | keydown           | KEY_NOLINK{q}        | <code>true</code>           |                         | Latin Small Letter Q |
		+| 6 | compositionupdate |                      |                             | <code>""</code>         |                      |
		+| 7 | compositionend    |                      |                             | <code>""</code>         |                      |
		+| 8 | keyup             | KEY_NOLINK{q}        | <code>false</code>          |                         |                      |
		++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

	<h4 id="keys-IME">Input Method Editors</h4>

		This specification includes a model for <a>input method editors</a>
		(IMEs), through the {{CompositionEvent}} interface and events.
		However, Composition Events and Keyboard Events do not necessarily map
		as a one-to-one relationship.  As an example, receiving a EVENT{keydown}
		for the KEYCAP{Accept} key value does not necessarily imply that the
		text currently selected in the <a>IME</a> is being accepted, but
		indicates only that a keystroke happened, disconnected from the
		<a>IME</a> Accept functionality (which would normally result in a
		EVENT{compositionend} event in most <a>IME</a> systems).  Keyboard
		events cannot be used to determine the current state of the input method
		editor, which can be obtained through the {{CompositionEvent/data}}
		attribute of the {{CompositionEvent}} interface.  Additionally,
		<a>IME</a> systems and devices vary in their functionality, and in which
		keys are used for activating that functionality, such that the
		KEYCAP{Convert} and KEYCAP{Accept} keys MAY be represented by other
		available keys. Keyboard events correspond to the events generated by
		the input device after the keyboard layout mapping.

		<p class="note">
		In some implementations or system configurations, some key events, or
		their values, might be suppressed by the <a>IME</a> in use.
		</p>

		The following example describes a possible sequence of keys to generate
		the Unicode character GLYPH{&#x5E02;} (Kanji character, part of CJK
		Unified Ideographs) using Japanese input methods. This example assumes
		that the input method editor is activated and in the Japanese-Romaji
		input mode. The keys KEYCAP{Convert} and KEYCAP{Accept} MAY be replaced
		by others depending on the input device in use and the configuration of
		the IME, e.g., it can be respectively UNI{U+0020} (Space key) and
		KEYCAP{Enter}.

		<p class="note">
		GLYPH{&#x8A69;} (<q>poem</q>) and GLYPH{&#x5E02;} (<q>city</q>) are
		homophones, both pronounced &#x3057; (<q>shi</q>/<q>si</q>), so the user
		needs to use the KEYCAP{Convert} key to select the proper option.
		</p>

		<div class="example">
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| #  | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
		 |    |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +----+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
		+|  1 | keydown           | KEY_NOLINK{s}        | <code>false</code>          |                         | Latin Small Letter S |
		+|  2 | compositionstart  |                      |                             | GLYPH{}                 |                      |
		+|  3 | beforeinput       |                      |                             |                         |                      |
		+|  4 | compositionupdate |                      |                             | GLYPH{s}                |                      |
		+|    |                   |                      |                             |                         | DOM is updated       |
		+|  5 | input             |                      |                             |                         |                      |
		+|  6 | keyup             | KEY_NOLINK{s}        | <code>true</code>           |                         |                      |
		+|  7 | keydown           | KEY_NOLINK{i}        | <code>true</code>           |                         | Latin Small Letter I |
		+|  8 | beforeinput       |                      |                             |                         |                      |
		+|  9 | compositionupdate |                      |                             | GLYPH{&#x3057;}         | <em>shi</em>         |
		+|    |                   |                      |                             |                         | DOM is updated       |
		+| 10 | input             |                      |                             |                         |                      |
		+| 11 | keyup             | KEY_NOLINK{i}        | <code>true</code>           |                         |                      |
		+| 12 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
		+| 13 | beforeinput       |                      |                             |                         |                      |
		+| 14 | compositionupdate |                      |                             | GLYPH{&#x8A69;}         | "poem"               |
		+|    |                   |                      |                             |                         | DOM is updated       |
		+| 15 | input             |                      |                             |                         |                      |
		+| 16 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 17 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
		+| 18 | beforeinput       |                      |                             |                         |                      |
		+| 19 | compositionupdate |                      |                             | GLYPH{&#x5E02;}         | "city"               |
		+|    |                   |                      |                             |                         | DOM is updated       |
		+| 20 | input             |                      |                             |                         |                      |
		+| 21 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 22 | keydown           | KEY{Accept}          | <code>true</code>           |                         | Accept               |
		+| 23 | compositionend    |                      |                             | GLYPH{&#x5E02;}         |                      |
		+| 24 | keyup             | KEY{Accept}          | <code>false</code>          |                         |                      |
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

		IME composition can also be canceled as in the following example, with
		conditions identical to the previous example. The key KEYCAP{Cancel}
		might also be replaced by others depending on the input device in use
		and the configuration of the IME, e.g., it could be UNI{U+001B} (Escape
		key).

		<div class="example">
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		=| #  | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
		 |    |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
		 +----+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
		+|  1 | keydown           | KEY_NOLINK{s}        | <code>false</code>          |                         | Latin Small Letter S |
		+|  2 | compositionstart  |                      |                             | GLYPH{}                 |                      |
		+|  3 | compositionupdate |                      |                             | GLYPH{s}                |                      |
		+|  4 | keyup             | KEY_NOLINK{s}        | <code>true</code>           |                         |                      |
		+|  5 | keydown           | KEY_NOLINK{i}        | <code>true</code>           |                         | Latin Small Letter I |
		+|  6 | compositionupdate |                      |                             | GLYPH{&#x3057;}         | <em>shi</em>         |
		+|  7 | keyup             | KEY_NOLINK{i}        | <code>true</code>           |                         |                      |
		+|  8 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
		+|  9 | compositionupdate |                      |                             | GLYPH{&#x8A69;}         | "poem"               |
		+| 10 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 11 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
		+| 12 | compositionupdate |                      |                             | GLYPH{&#x5E02;}         | "city"               |
		+| 13 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
		+| 14 | keydown           | KEY{Cancel}          | <code>true</code>           |                         | Cancel               |
		+| 15 | compositionupdate |                      |                             | GLYPH{}                 |                      |
		+| 16 | compositionend    |                      |                             | GLYPH{}                 |                      |
		+| 17 | keyup             | KEY{Cancel}          | <code>false</code>          |                         |                      |
		++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
		</div>

		<p class="note">
		Some <a>input method editors</a> (such as on the MacOS operating system)
		might set an <a>empty string</a> to the composition data attribute
		before canceling a composition.
		</p>

		<h5 id="keys-IME-keys">Input Method Editor mode keys</h5>

			Some keys on certain devices are intended to activate <a>input
			method editor</a> functionality, or to change the mode of an active
			<a>input method editor</a>.  Custom keys for this purpose can be
			defined for different devices or language modes. The keys defined in
			this specification for this purpose are: KEY{Alphanumeric},
			KEY{CodeInput}, KEY{FinalMode}, KEY{HangulMode}, KEY{HanjaMode},
			KEY{Hiragana}, KEY{JunjaMode}, KEY{KanaMode}, KEY{KanjiMode},
			KEY{Katakana}, and KEY{RomanCharacters}.  When one of these keys is
			pressed, and no <a>IME</a> is currently active, the appropriate
			<a>IME</a> is expected to be activated in the mode indicated by the
			key (if available). If an <a>IME</a> is already active when the key
			is pressed, the active <a>IME</a> might change to the indicated
			mode, or a different <a>IME</a> might be launched, or the might MAY
			be ignored, on a device- and application-specific basis.

			This specification also defines other keys which are intended for
			operation specifically with <a>input method editors</a>:
			KEY{Accept}, KEY{AllCandidates}, KEY{Cancel}, KEY{Convert},
			KEY{Compose}, KEY{FullWidth}, KEY{HalfWidth}, KEY{NextCandidate},
			KEY{Nonconvert}, and KEY{PreviousCandidate}.  The functions of these
			keys are not defined in this specification &mdash; refer to other
			resources for details on <a>input method editor</a> functionality.

			<p class="note">
			Keys with <a>input method editor</a> functions are not restricted to
			that purpose, and can have other device- or implementation-specific
			purposes.
			</p>

	<h4 id="keys-cancelable-keys">Default actions and cancelable keyboard events</h4>

		Canceling the <a>default action</a> of a EVENT{keydown} event MUST NOT
		affect its respective EVENT{keyup} event, but it MUST prevent the
		respective EVENT{beforeinput} and EVENT{input} (and EVENT{keypress} if
		supported) events from being generated. The following example describes
		a possible sequence of keys to generate the Unicode character Q (Latin
		Capital Letter Q) on a US keyboard using a US mapping:

		<div class="example">
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		=| # | Event Type  |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | Modifiers                  | Notes                             |
		 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                            |                                   |
		 +---+-------------+----------o-----------+---------o----------+--------------o-------------+-----------------------------------+
		+| 1 | keydown     | KEY{Shift}           |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 2 | keydown     | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} | The <a>default action</a> is      |
		 |   |             |                      |                    |                            | prevented, e.g., by invoking      |
		 |   |             |                      |                    |                            | {{Event/preventDefault()}}.       |
		+|   |             |                      |                    |                            | <em>No EVENT{beforeinput} or      |
		 |   |             |                      |                    |                            | EVENT{input} (or EVENT{keypress}, |
		 |   |             |                      |                    |                            | if supported) events are          |
		 |   |             |                      |                    |                            | generated</em>                    |
		+| 3 | keyup       | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 4 | keyup       | KEY{Shift}           |                    |                            |                                   |
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		</div>

		If the key is a modifier key, the keystroke MUST still be taken into
		account for the modifiers states. The following example describes a
		possible sequence of keys to generate the Unicode character Q (Latin
		Capital Letter Q) on a US keyboard using a US mapping:

		<div class="example">
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		=| # | Event Type  |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | Modifiers                  | Notes                             |
		 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                            |                                   |
		 +---+-------------+----------o-----------+---------o----------+--------------o-------------+-----------------------------------+
		+| 1 | keydown     | KEY{Shift}           |                    | {{KeyboardEvent/shiftKey}} | The <a>default action</a> is      |
		 |   |             |                      |                    |                            | prevented, e.g., by invoking      |
		 |   |             |                      |                    |                            | {{Event/preventDefault()}}.       |
		+| 2 | keydown     | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 3 | beforeinput |                      | GLYPH{Q}           |                            |                                   |
		+| 4 | input       |                      |                    |                            |                                   |
		+| 5 | keyup       | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
		+| 6 | keyup       | KEY{Shift}           |                    |                            |                                   |
		++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
		</div>

		If the key is part of a sequence of several keystrokes, whether it is a
		<a>dead key</a> or it is contributing to an Input Method Editor
		sequence, the keystroke MUST be ignored (not taken into account) only if
		the <a>default action</a> is canceled on the EVENT{keydown} event.
		Canceling a <a>dead key</a> on a EVENT{keyup} event has no effect on
		EVENT{beforeinput} or EVENT{input} events. The following example uses
		the dead key KEY{Dead} (UNI{U+0302} Combining Circumflex Accent key) and
		KEY_NOLINK{e} (UNI{U+0065}, Latin Small Letter E key) on a French
		keyboard using a French mapping and without any modifier activated:

		<div class="example">
		++---+-------------+----------------------+--------------------+-----------------------------------+
		=| # | Event Type  |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | Notes                             |
		 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                                   |
		 +---+-------------+----------o-----------+---------o----------+-----------------------------------+
		+| 1 | keydown     | KEY{Dead}            |                    | The <a>default action</a> is      |
		 |   |             |                      |                    | prevented, e.g., by invoking      |
		 |   |             |                      |                    | {{Event/preventDefault()}}.       |
		+| 2 | keyup       | KEY{Dead}            |                    |                                   |
		+| 3 | keydown     | KEY_NOLINK{e}        |                    |                                   |
		+| 4 | beforeinput |                      | GLYPH{e}           |                                   |
		+| 5 | input       |                      |                    |                                   |
		+| 6 | keyup       | KEY_NOLINK{e}        |                    |                                   |
		++---+-------------+----------------------+--------------------+-----------------------------------+
		</div>

</section>
