<section>
<h2 id="legacy-key-attributes">遗留的按键事件 &amp; 鼠标事件的属性</h2>


<em>本节是不规范的。 以下属性已过时淘汰(obsolete)，
只能由需要与支持这些键盘事件的旧版软件兼容的 <a href="#user-agent">用户代理</a>
实现。</em>

这些功能从未被正式定义，当前的浏览器实现也有很大的不同。
包括脚本库的大量的遗留内容，依赖于对 <a href="#user-agent">用户代理</a> 
进行功能检查后采取相应动作，这意味着任何将这些遗留属性和事件进行形式化
(formalize)的尝试，都存在和修复之或使之有效一样多的破坏风险。
此外，这些属性不适合国际化使用，也不涉及无障碍问题。

因此，本规范没有规范性地定义那些通常已经用于处理键盘输入的事件和属性，
尽管为了与遗留内容兼容，它们 <span class="zh-upper">可以</span> 存在于
<a href="#user-agent">用户代理</a> 中。作者 <span class="zh-upper">应当</span> 
使用 {{KeyboardEvent/key}} 属性，而不是 {{KeyboardEvent/charCode}} 和 
{{KeyboardEvent/keyCode}} 属性。

不管怎样，为了记录这些特性的现状及其与规范的事件和属性的关系，
本节提供了有用的信息性(informative)描述。对于支持这些属性和事件的实现，
建议使用本节中提供的定义。

<h3 id="legacy-UIEvent">遗留的 {{UIEvent}} 补充接口</h3>

	<em>本节不是规范的</em>

	<a href="#user-agent">用户代理</a> 传统上包括 {{UIEvent/which}} 属性，以便 
	{{KeyboardEvent}} 和 {{MouseEvent}} 事件们可以记录补充的(supplemental)
	事件信息。

	<p class="note">
	本规范的早期版本直接在 {{KeyboardEvent}} 和 {{MouseEvent}} 上定义了单独的 
	{{UIEvent/which}} 属性，而不是在 {{UIEvent}} 上定义共享 {{UIEvent/which}} 
	属性。
	</p>

	<h4 id="legacy-interface-UIEvent">UIEvent 接口(补充)</h4>

		部分(partial) {{UIEvent}} 接口是 {{UIEvent}} 接口的信息性扩展，它添加了
		{{UIEvent/which}} 属性。

		<pre class="idl">
		partial interface UIEvent {
		  // The following support legacy user agents
		  readonly attribute unsigned long which;
		};
		</pre>

		<dl dfn-for="UIEvent">
			<dt class="origin-dfn"><dfn attribute>which</dfn></dt>
			<dt class="custom-dfn"><i><code class="idl">which</code></i>，
				<code>unsigned long</code>
				<span class="replacement"> 类型(32位无符号整型)，只读</span>
			</dt>
			
			<dd>
				对于 {{MouseEvent}} 事件对象，它包含的值等于存储在 {{MouseEvent/button}} 
				中的值 +1 。<br/> 对于 {{KeyboardEvent}} 事件对象，
				它包含一个与系统和实现相关的数字码(numerical code)，
				表示与按下的键相关的未修饰(unmodified)时的标识符。在大多数情况下，该值与
				{{KeyboardEvent/keyCode}} 相同。
			</dd>
		</dl>

	<h4 id="legacy-dictionary-UIEventInit">UIEventInit 接口(补充)</h4>

		包含对{{UIEvent}} 中的 {{UIEvent/which}} 支持的浏览器也应将以下成员添加到 
		{{UIEventInit}} 字典中。

		部分(partial) {{UIEventInit}} 字典是 {{UIEventInit}} 字典的信息性扩展，
		它添加了 {{UIEvent/which}} 以初始化对应的 {{UIEvent}} 属性成员。

		<pre class="idl">
		partial dictionary UIEventInit {
		  unsigned long which = 0;
		};
		</pre>

		<dl dfn-for="UIEventInit" data-noexport>
			<dt class="origin-dfn"><dfn dict-member>which</dfn></dt>
			<dt class="custom-dfn"><i><code class="idl">which</code></i>，
				<code>unsigned long</code>
				<span class="replacement"> 类型(32位无符号整型)，默认值为 
				<code>0</code> </span>
			</dt>
			
			<dd>
				初始化{{UIEvent}} 的 {{UIEvent/which}} 属性。
			</dd>
		</dl>


<h3 id="legacy-KeyboardEvent">遗留的 {{KeyboardEvent}} 补充接口</h3>

	<em>本节不是规范的</em>

	浏览器对键盘的支持在传统依赖于三个特殊(ad-hoc)属性: {{KeyboardEvent/keyCode}} 
	， {{KeyboardEvent/charCode}} ， 和 {{UIEvent}} 的 {{UIEvent/which}} 。

	这三个属性都返回一个数字码，表示按下的键的某一方面(some aspect): 
	{{KeyboardEvent/keyCode}} 是键本身的索引。 {{KeyboardEvent/charCode}} 
	是字符键的 ASCII 值。 {{UIEvent/which}} 是可用的字符值(同)，否则是键索引
	(通常和 {{KeyboardEvent/keyCode}} 相同)。这些属性的值以及属性的可用性在平台、
	键盘语言和布局、 <a href="#user-agent">用户代理</a>  、
	版本甚至事件类型之间都不一致。

	<div class="note custom-note">
	<q>事件类型之间都不一致</q> 指 {{KeyboardEvent/charCode}} 只在遗留的 
	EVENT{keypress} 事件中有值，其它键盘事件类型中默认为 <code>0</code> ，因为 
	EVENT{keypress} 只会在 DOM 发生更新时触发(即击键确定是一个字符按键，
	而不是功能，修饰，菜单或其它按键)，这能确保按键有对应的字符值，即 
	{{KeyboardEvent/charCode}} 才有效。<br/>此外，现代浏览器的 EVENT{keydown} 和 
	EVENTE{keyup} 的 {{KeyboardEvent/keyCode}} 和 {{UIEvent/which}} 
	属性的值总是相同(即等于键本身的索引)，而在同一次击键中可能触发的 
	EVENT{keypress} 事件的 {{KeyboardEvent/keyCode}} ， {{UIEvent/which}} 总是和 
	{{KeyboardEvent/charCode}} 属性值相同(即等于字符键的 ASCII 值)，
	这就导致了一次击键中 <q>这些属性的值</q> 甚至在 <q>事件类型之间都不一致</q> 
	的情况。可以访问 
	<a href="https://domeventviewer.com/key-event-viewer.html">
	https://domeventviewer.com/key-event-viewer.html</a> 自己测试。
	</div>
	
	<h4 id="legacy-interface-KeyboardEvent">Interface KeyboardEvent (supplemental)</h4>

		The partial {{KeyboardEvent}} interface is an informative extension of
		the {{KeyboardEvent}} interface, which adds the
		{{KeyboardEvent/charCode}} and {{KeyboardEvent/keyCode}} attributes.

		The partial {{KeyboardEvent}} interface can be obtained by using the
		{{Document/createEvent()}} method call in
		implementations that support this extension.

		<pre class="idl">
		partial interface KeyboardEvent {
		  // The following support legacy user agents
		  readonly attribute unsigned long charCode;
		  readonly attribute unsigned long keyCode;
		};
		</pre>

		<dl dfn-for="KeyboardEvent">
			<dt class="origin-dfn"><dfn attribute>charCode</dfn></dt>
			<dd>
				{{KeyboardEvent/charCode}} holds a character value, for
				EVENT{keypress} events which generate character input. The value
				is the Unicode reference number (code point) of that character
				(e.g. <code>event.charCode = event.key.charCodeAt(0)</code> for
				printable characters). For EVENT{keydown} or EVENT{keyup}
				events, the value of {{KeyboardEvent/charCode}} is
				<code>0</code>.
			</dd>

			<dt class="origin-dfn"><dfn attribute>keyCode</dfn></dt>
			<dd>
				{{KeyboardEvent/keyCode}} holds a system- and
				implementation-dependent numerical code signifying the
				unmodified identifier associated with the key pressed. Unlike
				the {{KeyboardEvent/key}} attribute, the set of possible values
				are not normatively defined in this specification. Typically,
				these value of the {{KeyboardEvent/keyCode}} SHOULD represent
				the decimal codepoint in ASCII [[RFC20]][[US-ASCII]] or Windows
				1252 [[WIN1252]], but MAY be drawn from a different appropriate
				character set. Implementations that are unable to identify a key
				use the key value KEYCAP{0}.

				See [[#legacy-key-models]] for more details on how to determine
				the values for {{KeyboardEvent/keyCode}}.
			</dd>
		</dl>

	<h4 id="legacy-dictionary-KeyboardEventInit">Interface KeyboardEventInit (supplemental)</h4>

		Browsers that include support for {{KeyboardEvent/keyCode}}
		and {{KeyboardEvent/charCode}} in
		{{KeyboardEvent}} should also add the following members to the
		{{KeyboardEventInit}} dictionary.

		The partial {{KeyboardEventInit}} dictionary is an informative extension
		of the {{KeyboardEventInit}} dictionary, which adds
		{{KeyboardEvent/charCode}} and {{KeyboardEvent/keyCode}}
		members to initialize the corresponding
		{{KeyboardEvent}} attributes.

		<pre class="idl">
		partial dictionary KeyboardEventInit {
		  // The following support legacy user agents
		  unsigned long charCode = 0;
		  unsigned long keyCode = 0;
		};
		</pre>

		<dl dfn-for="KeyboardEventInit" data-noexport>
			<dt class="origin-dfn"><dfn dict-member>charCode</dfn></dt>
			<dd>
				Initializes the {{KeyboardEvent/charCode}} attribute of the
				{{KeyboardEvent}} to the Unicode code point for the event's
				character.
			</dd>

			<dt class="origin-dfn"><dfn dict-member>keyCode</dfn></dt>
			<dd>
				Initializes the {{KeyboardEvent/keyCode}} attribute of the
				{{KeyboardEvent}} to the system- and implementation-dependent
				numerical code signifying the unmodified identifier associated
				with the key pressed.
			</dd>
		</dl>

<h3 id="legacy-key-models">Legacy key models</h3>

	<em>This section is non-normative</em>

	Implementations differ on which values are exposed on these attributes for
	different event types. An implementation MAY choose to expose both virtual
	key codes and character codes in the {{KeyboardEvent/keyCode}} property
	(<em>conflated model</em>), or report separate {{KeyboardEvent/keyCode}} and
	{{KeyboardEvent/charCode}} properties (<em>split model</em>).

	<h4 id="determine-keydown-keyup-keyCode">How to determine {{KeyboardEvent/keyCode}} for EVENT{keydown} and EVENT{keyup} events</h4>

		The {{KeyboardEvent/keyCode}} for EVENT{keydown} or EVENT{keyup} events
		is calculated as follows:

		*	Read the virtual key code from the operating system's event
			information, if such information is available.

		*	If an Input Method Editor is processing key input and the event is
			EVENT{keydown}, return 229.

		*	If input key when pressed without modifiers would insert a numerical
			character (0-9), return the ASCII code of that numerical character.

		*	If input key when pressed without modifiers would insert a lower
			case character in the a-z alphabetical range, return the ASCII code
			of the upper case equivalent.

		*	If the implementation supports a key code conversion table for the
			operating system and platform, look up the value. If the conversion
			table specifies an alternate virtual key value for the given input,
			return the specified value.

		*	If the key's function, as determined in an implementation-specific
			way, corresponds to one of the keys in the
			[[#fixed-virtual-key-codes]] table, return the corresponding key
			code.

		*	Return the virtual key code from the operating system.

		*	If no key code was found, return 0.

	<h4 id="determine-keypress-keyCode">How to determine {{KeyboardEvent/keyCode}} for EVENT{keypress} events</h4>

		The {{KeyboardEvent/keyCode}} for EVENT{keypress} events is calculated
		as follows:

		*	If the implementation supports a <em>conflated model</em>, set
			{{KeyboardEvent/keyCode}} to the Unicode code point of the character
			being entered.

		*	If the implementation supports a <em>split model</em>, set
			{{KeyboardEvent/keyCode}} to 0.

	<h4 id="fixed-virtual-key-codes">Fixed virtual key codes</h4>

		The virtual key codes for the following keys do not usually change with
		keyboard layouts on desktop systems:

		++------------+-------------+-------+
		=| Key        | Virtual Key | Notes |
		 |            | <br/>Code   |       |
		 +------------+------o------+---o---+
		+| Backspace  | 8           |       |
		+| Tab        | 9           |       |
		+| Enter      | 13          |       |
		+| Shift      | 16          |       |
		+| Control    | 17          |       |
		+| Alt        | 18          |       |
		+| CapsLock   | 20          |       |
		+| Escape     | 27          | Esc   |
		+| Space      | 32          |       |
		+| PageUp     | 33          |       |
		+| PageDown   | 34          |       |
		+| End        | 35          |       |
		+| Home       | 36          |       |
		+| ArrowLeft  | 37          |       |
		+| ArrowUp    | 38          |       |
		+| ArrowRight | 39          |       |
		+| ArrowDown  | 40          |       |
		+| Delete     | 46          | Del   |
		++------------+-------------+-------+

	<h4 id="optionally-fixed-virtual-key-codes">Optionally fixed virtual key codes</h4>

		The following punctuation characters MAY change virtual codes between
		keyboard layouts, but reporting these values will likely be more
		compatible with legacy content expecting US-English keyboard layout:

		++------------------------+-----------------+-------------+
		=| Key                    | Character       | Virtual Key |
		 |                        |                 | <br/>Code   |
		 +------------------------+--------o--------+------o------+
		+| Semicolon              | GLYPH{;}        | 186         |
		+| Colon                  | GLYPH{:}        | 186         |
		+| Equals sign            | GLYPH{=}        | 187         |
		+| Plus                   | GLYPH{+}        | 187         |
		+| Comma                  | GLYPH{,}        | 188         |
		+| Less than sign         | GLYPH{&lt;}     | 188         |
		+| Minus                  | GLYPH{-}        | 189         |
		+| Underscore             | GLYPH{_}        | 189         |
		+| Period                 | GLYPH{.}        | 190         |
		+| Greater than sign      | GLYPH{&gt;}     | 190         |
		+| Forward slash          | GLYPH{/}        | 191         |
		+| Question mark          | GLYPH{?}        | 191         |
		+| Backtick               | GLYPH{`}        | 192         |
		+| Tilde                  | GLYPH{~}        | 192         |
		+| Opening squace bracket | GLYPH{[}        | 219         |
		+| Opening curly brace    | GLYPH{{}        | 219         |
		+| Backslash              | GLYPH{\}        | 220         |
		+| Pipe                   | GLYPH{&vert;}   | 220         |
		+| Closing square bracket | GLYPH{]}        | 221         |
		+| Closing curly brace    | GLYPH{&rbrace;} | 221         |
		+| Single quote           | GLYPH{'}        | 222         |
		+| Double quote           | GLYPH{"}        | 222         |
		++------------------------+-----------------+-------------+


</section>
